<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[mongoDB学习指南]]></title>
    <url>%2F2018%2F03%2F30%2FmongoDB%2F</url>
    <content type="text"><![CDATA[Mongodb是分布式文档存储数据库，由C++语言编写，旨在为WEB应用提供可扩展的高性能数据存储解决方案。MongoDB是一个高性能，开源，无模式的文档型数据库，是当前NoSql数据库中比较热门的一种。它在许多场景下可用于替代传统的关系型数据库或键/值存储方式,接下来就让我们学习一下它吧! 安装和配置 mongoDB安装教程 1.基本操作 123456789101112# 查看数据库show dbs# 切换/创建数据库use [数据库名]# 删除数据库1.先切换到想要删除的数据库2.执行命令: db.dropDatabase()# 创建集合并插入数据 如果集合不存在mongoDB会自动创建并插入文档db.class_name.insert(&#123;name:"一班"&#125;)# 删除集合db.collection_name.drop() 2.查询 1234567891011121314151617# 查找集合中的文档db.collection_name.find()# 以易读的方式查看查询的文档db.collection_name.find().pretty()# 除了 find() 方法之外，还有一个 findOne() 方法，它只返回一个文档。# MongoDB 的 find() 方法可以传入多个键(key),类似于sql的anddb.collection_name.find(&#123;key: 1, name:"xx"&#125;)# 或条件查询,类似于sql的ordb.col.find(&#123;$or:[&#123;"by":"菜鸟教程"&#125;,&#123;"title": "MongoDB 教程"&#125;]&#125;)# AND 和 OR 联合使用db.col.find(&#123;"likes": &#123;$gt:50&#125;, $or: [&#123;"by": "Mongodb中文网"&#125;,&#123;"title": "MongoDB 教程"&#125;]&#125;)# 条件操作符 -- $gt 大于; $gte 大于等于; $lt 小于; $lte 小于等于; 使用如下:db.col.find(&#123;num: &#123;$gt: 100&#125;&#125;) # 查询num值大于100的数据 3.更新修改和删除集合中的文档 123456789101112131415# 更新集合中的数据db.collection_name.update(&#123;更新前的数据&#125;,&#123;更新后的数据&#125;)# 列如:db.user.update(&#123;x:1&#125;,&#123;x:99&#125;)# 如果某一条数据有多个字段,则为了避免不覆盖,应该使用$set,其为部分操作符,$set后存在的字段将被更新,不存在的不会更新,如:db.user.update(&#123;z:1&#125;,&#123;$set:&#123;y:22&#125;&#125;)# 如果更新的数据不存在,则插入一条新数据,需要用到update第三个参数,设为truedb.user.update(&#123;z:003&#125;,&#123;y:33&#125;,true)# update默认值只更新找到的第一条数据,如果要求更新所有查询到的数据,则要使用$set和将第四个参数设为true.如:db.user.update(&#123;x:"xx"&#125;,&#123;$set:&#123;x:"xdf"&#125;&#125;,false,true)# 删除数据 remove(&#123;&#125;)内的参数必填,默认删除所有找到的数据db.user.remove(&#123;x:"22"&#125;) # 删除找到的所有x:22的数据db.user.remove(&#123;&#125;) # 删除集合中所有数据sb.user.remove(&#123;x:22&#125;,true/1) # 删除找到的第一条数据 3.2 mongoDB修改器深入 123456789101112# $inc 可以对文档的某个值为数字型（只能为满足要求的数字）的键进行增减的操作db.user.update(&#123;num:2&#125;,&#123;$inc:&#123;num:1&#125;&#125;) # 每次执行对num增加1,默认只对第一个匹配的执行# $set 用来指定一个键并更新键值，若键不存在并创建db.a.update(&#123;"uid" : "22","type" : "3"&#125;,&#123;$set:&#123;"size":10&#125;&#125;)db.c.update(&#123;"name":"toyota"&#125;,&#123;"$set":&#123;"size.width":7&#125;&#125;) # $set通过.语法修改内嵌文档# $unset 用来删除键. 使用时，不论对目标键使用1、0、-1或者具体的字符串等都是可以删除该目标键db.a.update(&#123;"uid" : "02","type" : "3"&#125;,&#123;$unset:&#123;"size":-1&#125;&#125;)# 数组修改器 $push--向文档的某个数组类型的键添加一个数组元素，不过滤重复的数据。添加时键存在，要求键值类型必须是数组；键不存在，则创建数组类型的键db.c.update(&#123;"name" : "toyota"&#125;,&#123;$push:&#123;"title":"t1"&#125;&#125;) 4.索引 123456789101112131415161718192021222324252627282930# 查看集合索引db.user.getIndexes()# 创建索引 --单一索引 -- 1 表示正序, -1 表示逆序db.user.ensureIndex(&#123;x:1&#125;)# 过期索引--一段时间后会过期的索引,索引过期后数据也会被清除# 过期索引的限制:过期索引字段的值必须是指定的时间类型,即IOSDate或IOS数组,不能是时间戳# 如果指定了时间数组,则按最小的时间进行删除# 过期索引不能是复合索引# 过期索引是不精确的db.user.ensureIndex(&#123;time:1&#125;,&#123;expireAfterSeconds:10&#125;)# 全文索引 --索引字段"text"为必填字段 -- 一个集合只能有一个全文索引db.user.ensureIndex(&#123;name:"text"&#125;) #对单一字段创建全文索引db.user.ensureIndex(&#123;"$**":"text"&#125;) #对集合中所有字段创建全文索引# 使用方式:db.user.find(&#123;$text:&#123;$search:"aa bb"&#125;&#125;) #在集合中查询有aa或bb字段的数据文档db.user.find(&#123;$text:&#123;$search:"aa -cc"&#125;&#125;) #在集合中查询有aa字段但不包含cc字段的文档db.user.find(&#123;$text:&#123;$search:"\"aa\" \"bb\""&#125;&#125;) #在集合中查询有aa并且有bb字段的文档# 全文索引相似度 -- &#123;score:&#123;$meta:"textScore"&#125;&#125; db.user.find(&#123;$text:&#123;$search:"aa"&#125;&#125;,&#123;score:&#123;$meta:"textScore"&#125;&#125;).sort(&#123;score:&#123;$meta:"textScore"&#125;&#125;) # 显示相似度并根据相似度排序# 全文索引的限制1.每次查询只能指定一个$text2.$text查询不能出现在$nor查询中3.目前不支持中文4.查询中如果包含$text,则hint将不再起作用]]></content>
      <categories>
        <category>mongoDB</category>
      </categories>
      <tags>
        <tag>mongoDB</tag>
        <tag>mongoose</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js常用工具函数]]></title>
    <url>%2F2018%2F03%2F18%2Fjs-tools%2F</url>
    <content type="text"><![CDATA[下面给大家梳理了我平时在工作中常用的js方法，本来是打算作为自己的工具库的，为了发现代码的最佳方案，再此贴出，望相互交流。 程序员必读 Css3编码技巧 1.检测平台（设备）类型12345var isWechat = /micromessenger/i.test(navigator.userAgent), isWeibo = /weibo/i.test(navigator.userAgent), isQQ = /qq\//i.test(navigator.userAgent), isIOS = /(iphone|ipod|ipad|ios)/i.test(navigator.userAgent), isAndroid = /android/i.test(navigator.userAgent); 2.时间格式化12345678910111213// 时间格式化function format_date(timeStamp) &#123; var date = new Date(timeStamp); return date.getFullYear() + "年" + prefix_zero(date.getMonth() + 1) + "月" + prefix_zero(date.getDate()) + "日 " + prefix_zero(date.getHours()) + ":" + prefix_zero(date.getMinutes());&#125;// 数字格式化function prefix_zero(num) &#123; return num &gt;= 10 ? num : "0" + num;&#125; 3.倒计时函数123456789101112131415// 倒计时时间格式化function format_time(timeStamp) &#123; var day = Math.floor(timeStamp / (24 * 3600 * 1000)); var leave1 = timeStamp % (24 * 3600 * 1000); var hours = Math.floor(leave1 / (3600 * 1000)); var leave2 = leave1 % (3600 * 1000); var minutes = Math.floor(leave2 / (60 * 1000)); var leave3 = leave2 % (60 * 1000); var seconds = Math.floor(leave3 / 1000); if (day) return day + "天" + hours + "小时" + minutes + "分"; if (hours) return hours + "小时" + minutes + "分" + seconds + "秒"; if (minutes) return minutes + "分" + seconds + "秒"; if (seconds) return seconds + "秒"; return "时间到！";&#125; 4.判断设备是否支持触摸事件1var isSupportTouch = ("ontouchstart" in document.documentElement) ? true : false; 5.js+rem实现移动端适配123456789101112131415161718192021(function (doc, win) &#123; var docEl = doc.documentElement, resizeEvt = 'orientationchange' in window ? 'orientationchange' : 'resize', recalc = function () &#123; var clientWidth = docEl.clientWidth; var fontSize = 20; docEl.style.fontSize = fontSize + 'px'; var docStyles = getComputedStyle(docEl); var realFontSize = parseFloat(docStyles.fontSize); var scale = realFontSize / fontSize; console.log("realFontSize: " + realFontSize + ", scale: " + scale); fontSize = clientWidth / 667 * 20; if(isIphoneX()) fontSize = 19; fontSize = fontSize / scale; docEl.style.fontSize = fontSize + 'px'; &#125;; // Abort if browser does not support addEventListener if (!doc.addEventListener) return; win.addEventListener(resizeEvt, recalc, false); doc.addEventListener('DOMContentLoaded', recalc, false);&#125;)(document, window);]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css2.0深入探究]]></title>
    <url>%2F2018%2F03%2F17%2Fcss2-01%2F</url>
    <content type="text"><![CDATA[要想深入一个事物，最好对其总体有个大体的了解。要想学好css,最好对其进行深入的研究，让自己对其有足够的控制感，这样才能发挥css最大的价值。 程序员必读 Css3编码技巧 1.css尺寸1.首选最小宽度–实现复杂图形效果 在css中，图片和文字的权重远大于布局，因此当width:0时表现出来的宽度就是“首选最小宽度”。中文的最小宽度为每个汉字的宽度，西方文字取决于连续的英文字符单元。 .win-wrap{ text-align: center; } .minW{ display: inline-block; width: 0; line-height: 1.4; } .minW::before{ content: "love 你 love"; color: transparent; outline: 2px solid #cd0000; } .minW:hover::before{ content: "你 love 我"; color: transparent; outline: 2px solid #cd0000; } 123456789.minW&#123; display: inline-block; width: 0&#125;.minW:hover::before&#123; content: "你 love 我"; color: transparent; outline: 2px solid #cd0000;&#125; 2.子元素宽度设为100%时的奇怪现象原理探究 父元素的宽度 = 图片宽度 + 文字内容宽度浏览器渲染原理：先下载文档内容，加载头部样式资源，然后按从上到下、自外而内的顺序渲染dom内容。本例的现象产生的原因就是：当渲染到父元素时，子元素的width:100%并没有渲染，宽度就是图片加文字内容的宽度；等渲染到文字这个子元素的时候，父元素的宽度已经固定，此时的width:100%就是以固定好的父元素的宽度，宽度不够只能溢出。 .box{ margin-left: 50%; transform: translateX(-50%); display: inline-block; height: 100px; white-space: nowrap; background-color: rgba(0,0,0,.4); } .img{ display: inline-block; width: 120px; text-align: center; } .text{ display: inline-block; width: 100%; color: #fff; background-color: #06c; } img 半透明背景色是父级width:100% 12345678.box&#123; display: inline-block; white-space: nowrap;&#125; .text&#123; display: inline-block; width: 100%;&#125; 3.如何让元素支持height:100%效果* 1.设置显示的高度值 * 2.使用绝对定位 知识点：绝对定位的宽高百分比是基于padding-box的，而非绝对定位的宽高百分比是基于content-box 4.任意高度元素的展开收起动画(max-height/min-height)* 1.min-height/min-width的初始尺寸为auto, max-height/max-width的初始尺寸为none * 2.min-height/min-width的优先级高于max-width/max-height .navbar{ width: 200px; margin: 20px auto; text-align: center; } .nav{ border-bottom: 2px solid #06c; cursor: pointer; } .nav > .sub-nav{ max-height: 0; overflow: hidden; transition: max-height .6s cubic-bezier(.17,.67,.76,1.41) } .nav:hover > .sub-nav{ max-height: 400px; } .sub-nav > div:hover{ color: #fff; background: #06c; } 首页 花朵 云彩 DIV 12345678.nav &gt; .sub-nav&#123; max-height: 0; overflow: hidden; transition: max-height .6s cubic-bezier(.17,.67,.76,1.41)&#125;.nav:hover &gt; .sub-nav&#123; max-height: 400px;&#125; 5.内联元素深入探究 常见的内联元素有：display设置为inline,inline-block,inline-table的元素内联盒模型: 1. 内容区域：可以理解为文本选中的背景色区域(重点) 2. 内联盒子：内联标签或者纯文本 3. 行框盒子：由内联盒子组成的一行，每一行就是一个行框盒子 4. 包含盒子：由行框盒子组成的盒子 幽灵空白节点：在HTML5文档声明中，内联元素的解析和渲染表现就像每个行框盒子的前面有一个空白节点一样。如下案例所示： .in-ex{ background: #06c; } 1&lt;div class="in-ex"&gt;&lt;span style="display: inline-block"&gt;&lt;/span&gt;&lt;/div&gt; 6.深入理解content 1.在web中，很多替换元素在没有明确尺寸设定的情况下，其默认的尺寸（不包含边框）为300*150，如video,iframe,canvas等，少数为0，如img,而表单元素的替换尺寸和浏览器自身有关。 2.对于img元素，如果有css尺寸，则最终尺寸由css尺寸决定(css尺寸 &gt; html尺寸 &gt; 固有尺寸) 3.当图片的src属性缺省时，图片不会有任何请求，是最高效的实现方式，如下展示的是使用此方式的图片占位代码(对于firefox浏览器，src缺省的img是一个普通的内联元素，宽高设置无效)： 12img &#123; visibility: hidden; &#125;img[src] &#123; visibility: visible; &#125; 4.content内容生成技术 12345/* 1.实现换行 */::after&#123; content: '\A'; white-space: pre;&#125; 2.实现正在加载动画 .dot{ display: inline-block; width: 8em; height: 1em; line-height: 1; text-align: left; vertical-align: -.25em; overflow: hidden; } .dot::after{ display: block; margin-left: 5.2em; content: '...\A..\A.'; white-space: pre-wrap; animation: dot 3s infinite step-start both; } @keyframes dot{ 33% { transform: translateY(-3em);} 66% { transform: translateY(-2em);} 99% { transform: translateY(-1em);} } 正在加载中 123456789101112131415161718192021.dot&#123; display: inline-block; width: 8em; height: 1em; line-height: 1; text-align: left; vertical-align: -.25em; overflow: hidden;&#125;.dot::after&#123; display: block; margin-left: 5.2em; content: '...\A..\A.'; white-space: pre-wrap; animation: dot 3s infinite step-start both;&#125;@keyframes dot&#123; 33% &#123; transform: translateY(-3em);&#125; 66% &#123; transform: translateY(-2em);&#125; 99% &#123; transform: translateY(-1em);&#125;&#125; 3.属性值内容生成 .icon{ display: inline-block; padding: 2px 4px; border-radius: 4px; background: #000; } .icon::after{ content: attr(data-tip); } 12345&lt;div class="icon" data-tip="江小白"&gt;&lt;/div&gt;/* 可以使用原生属性和自定义属性 */.icon::after&#123; content: attr(data-tip);&#125; 4.计数器属性---纯css实现技术器效果 &gt; 知识点： content的计数器属性 .counter{ height: 100px; background: #06c; color: #fff; } .box1{ padding: 10px; counter-reset: count1; } .xigua:checked::before{ content: counter(count1); counter-increment: count1; position: absolute; color: transparent; } .box1::after{ content: counter(count1); position: absolute; margin-top: -100px; margin-left: 6em; transform: translateY(20px); border-radius: 50%; line-height: 60px; text-align: center; padding: 2px; width: 60px; height: 60px; box-sizing: border-box; color: #06c; background-color: #fff; } 西瓜 香蕉 萝卜 1234567891011121314151617181920.box1&#123; counter-reset: count1;&#125;.xigua:checked::before&#123; content: counter(count1); counter-increment: count1; position: absolute; color: transparent;&#125;.box1::after&#123; content: counter(count1);&#125;&lt;/style&gt;&lt;div class="counter"&gt; &lt;div class="box1"&gt; &lt;div&gt;西瓜&lt;input class="xigua" type="checkbox" /&gt;&lt;/div&gt; &lt;div&gt;香蕉&lt;input class="xigua" type="checkbox" /&gt;&lt;/div&gt; &lt;div&gt;萝卜&lt;input class="xigua" type="checkbox" /&gt;&lt;/div&gt; &lt;/div&gt;&lt;/div&gt; 6.padding深入研究1.对于盒模型设置为box-sizing: border-box的元素，如果padding足够大，那么width将失效: .pd-1{ margin-left: auto; margin-right: auto; background: #06c; width: 200px; padding-left: 120px; padding-right: 120px; box-sizing: border-box; color: #fff; } 内容为首选最小宽度 1234width: 200px;padding-left: 120px;padding-right: 120px;box-sizing: border-box; 2.对于内联元素，padding对视觉层和布局层都会有影响，如果父元素设置overflow:auto,则内联子元素的垂直padding可能会使父元素出现滚动条，否则如果父元素不设置设置overflow，只会在垂直方向上发生重叠，不会影响布局: .pd-2-1{ margin-left: auto; margin-right: auto; margin-bottom: 30px; background: #06c; width: 200px; box-sizing: border-box; color: #fff; } .pd-2-1 > span{ padding-top: 1em; padding-bottom: 1em; background: #f06; } .pd-2-2{ margin-left: auto; margin-right: auto; background: #06c; width: 200px; overflow: auto; box-sizing: border-box; color: #fff; } .pd-2-2 > span{ padding-top: 2em; padding-bottom: 2em; background: #f06; } 父元素不设置overflow 父元素设置overflow 12345678/* 父元素设置 */.pd-2-1&#123; overflow: auto;&#125;.pd-2-1 &gt; span&#123; padding-top: 1em; padding-bottom: 1em;&#125; 3.padding的实际应用（具体实现可自行思考） 1.增加链接或按钮的点击区域的大小 2.利用内联元素的padding实现高度可控的分割线 3.用内联元素实现瞄点定位距离 4.利用padding百分比值实现等比例缩放图片效果 .pd-3{ padding: 10% 50%; position: relative; } .pd-3 img{ position: absolute; width: 100%; height: 100%; left: 0; top: 0; } 1234567891011.pd-3&#123; padding: 10% 50%; position: relative;&#125;.pd-3 img&#123; position: absolute; width: 100%; height: 100%; left: 0; top: 0;&#125; ** 注：内联元素的垂直padding会让幽灵空白节点显现,此时可考虑设置font-size:0 5.padding与图形绘制 1.菜单图标设计 .icon-menu{ display: inline-block; margin-left: 10%; width: 120px; height: 10px; padding: 35px 0; border-bottom: 10px solid; border-top: 10px solid; background-clip: content-box; background-color: currentColor; } 2.双层圆点效果 .icon-dot{ display: inline-block; margin-left: 10%; width: 60px; height: 60px; padding: 10px; border-radius: 50%; border: 10px solid; background-clip: content-box; background-color: currentColor; } 12345678910111213141516171819202122 /* 菜单 */ .icon-menu&#123; display: inline-block; width: 120px; height: 10px; padding: 35px 0; border-bottom: 10px solid; border-top: 10px solid; background-clip: content-box; background-color: currentColor;&#125;/* 双层圆点 */.icon-dot&#123; display: inline-block; width: 60px; height: 60px; padding: 10px; border-radius: 50%; border: 10px solid; background-clip: content-box; background-color: currentColor;&#125; 7.margin深入研究 1.使用:nth-type-of(3n)去除子元素尾部margin .mg-wrap{ width: 640px; height: 100px; background: #000; } .mg-item{ float: left; width: 200px; height: 100px; background: #06c; color: #fff; text-align: center; margin-right: 20px; } .mg-item:nth-of-type(3n){ margin-right: 0; } margin-right: 20px margin-right: 20px margin-right: 20px 123.mg-item:nth-of-type(3n)&#123; margin-right: 0;&#125; 注：如果容器可以滚动，在IE和firefox下会忽略padding-bottom的值，chrome则不会，此时可以通过margin-bottom实现滚动容器的底部留白 .box-wrap{ width: 640px; height: 100px; padding: 30px 0; overflow: auto; background: #000; } .box-inner{ width: 200px; height: 200px; background: #06c; } * 其本质区别在于：chrome是子元素超过父元素content box尺寸触发滚动条显示，而IE和Firefox浏览器是超过padding box尺寸时触发滚动条显示 2.margin合并块级元素，但不包含浮动和绝对定位元素在默认文档流下只出现在垂直方向 margin合并的三种场景 1.相邻兄弟元素 2.父级和第一个/最后一个子元素* 解决方案： 父级设置为块级格式化上下文元素 父元素设置border-top/bottom值 父元素设置padding-top/bottom值 父元素设置高度 3.空块级元素margin合并 margin合并的计算规则 “正正取大值”，”正负值相加”，”负负最负值” 深入理解margin:auto 1.如果一侧定值，一侧auto，则auto为剩余空间大小 2.如果两侧均是auto，则平分剩余空间 3.触发margin:auto计算的前提：width或height为auto时，元素是具有自动填充特性的。 .father{ position: relative; margin: 20px; height: 60px; overflow: auto; background: #000; } .child-1{ width: 40px; height: 20px; background: #06c; margin-right: 20px; margin-left: auto; } .child-2{ position: absolute; left: 0; bottom: 0; right: 0; top: 0; width: 40px; height: 20px; background: #06c; margin: auto; } 123456/* 1 */margin-right: 20px;margin-left: auto;/* 2 */margin-right:auto;margin-left: auto; 绝对定位元素利用margin:auto实现水平垂直居中(兼容到ie8+) 12345678910.father&#123; position: relative;&#125;.child-2&#123; position: absolute; left: 0; bottom: 0; right: 0; top: 0; width: 40px; height: 20px; margin: auto;&#125; margin无效情形解析 display计算值为inline的非替换元素的垂直margin是无效的 对于内联替换元素，垂直margin有效，并且没有margin合并问题，所以永远不会发生margin合并 内联特性导致margin失效：一个容器里面有一个图片，图片设置margin-top,随着margin-top负值越来越大，达到某一具体负值时，图片将不再往上偏移 8.border深入研究 重置边框的高性能方案 border-width的默认值为3px,边框宽度没有半像素的概念边框样式的默认值是none,经测试以下方案性能最优 1234.border&#123; border: 2px solid #ccc; border-bottom: 0 none;&#125; border-style: double的高级用法 double的表现规则: 双线宽度永远相等，中间间隔+-1利用双线边框实现菜单按钮 .border-icon{ margin-left: auto; margin-right: auto; width: 100px; height: 20px; border-top: 60px double #06c; border-bottom: 20px solid #06c; transition: transform 1s; } .border-icon:hover{ transform: rotate(90deg); } 123456.border-icon&#123; width: 100px; height: 20px; border-top: 60px double #06c; border-bottom: 20px solid #06c;&#125; 9.字母x与css中的基线 基线 字母x的下边缘x-height 指字母x的高度ex：ex指小写字母x的高度，是相对单位vertical-align:middle 指的是基线往上1/2 x-height高度 .txt-wrap{ line-height: 1; } .f1{ font-size: 40px; vertical-align: middle } .f3{ font-size: 30px; vertical-align: middle } .f2{ display: inline-block; width: 10px; height: 2ex; background: #000; } X X 1内联元素设置对齐方式时，是基于最前面的内联元素的基线，然后根据自己的vertical-align来调整对齐的 10.line-height深入研究 1.对于非替换元素的纯内联元素，其可视高度完全由line-height决定，padding,border对其可视高度没有任何影响。2.line-height不能影响替换元素的高度 .lh-wrap{ margin-bottom: 20px; line-height: 1em; font-size: 30px; border: 1px solid #000; } .lh1{ border: 1px solid #000; } 徐r 3.line-height属性值的具体了解： 数值：如1.5，即1.5倍字体大小，此时子元素将继承1.5而不是最终父元素计算的值 百分比：如200%，子元素将继承最终计算的值 em：如2m，子元素将继承最终计算的值 4.多行文本垂直居中 .lh2-wrap{ margin: 20px auto; width: 400px; line-height: 7em; font-size: 16px; border: 1px solid #000; } .lh2-1{ display: inline-block; line-height: 2em; vertical-align: middle; } 徐rjhfj下客服打击开发商电话JFK幅度萨芬京东卡好的的JFK是否获得男子冒充 123456789/* 文本块用inline-block，借助vertical-align: middle */.lh2-wrap&#123; line-height: 7em;&#125;.lh2-1&#123; display: inline-block; line-height: 2em; vertical-align: middle;&#125; 5.计算行高时，一定要向上舍入，因为谷歌浏览器计算数值时是向下取整的6.无论内联元素line-height如何设置，最终父元素的高度都是由数值大的那个line-height决定的。 10.vertical-align深入探究 1.vertical-align的数值百分比属性值介绍： 数值： 如vertical-align: 10px; 正值往上偏移，负值往下偏移，兼容性良好 百分比： 如vertical-align: 10%; 基于line-height计算，不过不常用 2.vertical-align的作用前提： 只能应用于内联元素和display:table-cell的元素 注：1.浮动和绝对定位会让元素块状化，所以使用vertical-align时会失效 2.对于teble-cell元素而言，vertical-align作用的是自身，因为其本身有内联性质，所以对子元素设置vertical-align无效 3.vertical-align和line-height的关系重要 现象1：容器高度不等于行高 .lh3-wrap{ margin: 20px auto; width: 200px; background: #000; line-height: 32px; } .lh3-1{ /* display: inline-block; */ font-size: 28px; background: #06c; color: #fff; /* vertical-align: bottom; */ } x徐rjhfj下客 123456.lh3-wrap&#123; line-height: 32px;&#125;.lh3-1&#123; font-size: 28px;&#125; 为什么实际高度会超过32px呢？是因为幽灵空白节点的字体大小和内联元素字体大小不同，字体越大基线越低导致两个元素上下偏移，使得容器高度超过原先的设定。解决方案：1.内联元素设置对其方式为bottom或者top 2.将幽灵空白节点和内联元素字体设置成一样的 现象2. 图片底部始终留有间隙的问题 原因：是由line-height,vertical-align和和幽灵空白节点共同决定的。因为图片之前的空白节点和图片默认基线对齐，而幽灵空白节点的行高导致多余的间隙导致图片下面空出了一段距离。解决方案： 1.图片块状话化 2.容器line-height足够小 3.图片设置vertical-align为top,bottom,middle任意一种 现象3. 图片设置margin-top到一定值时无效原因： 被幽灵空白节点的vertical-align:baseline限定死了 4.应用-实现垂直剧中的弹窗 .mask{ position: fixed; /* z-index: 9999; */ display: none; left: 0; top: 0; right: 0; bottom: 0; text-align: center; background: rgba(0,0,0,.8); font-size: 0; white-space: nowrap; overflow: auto; } .mask::after{ content: ''; display: inline-block; height: 100%; vertical-align: middle; } .dialog{ display: inline-block; text-align: left; font-size: 14px; color: #fff; white-space: normal; } #show_mask{ display: inline-block; padding: 4px 10px; border-radius: 4px; background: #06c; color: #fff; cursor: pointer; } dddd 显示弹窗 var btn = document.getElementById("show_mask"), mask = document.getElementById("mask1"), isShow = false; btn.onclick = function(){ mask.style.display = "block"; isShow = true; } mask.onclick = function(){ this.style.display = "none"; isShow = false; } 1234567891011121314151617181920212223242526.mask&#123; position: fixed; /* z-index: 9999; */ left: 0; top: 0; right: 0; bottom: 0; text-align: center; background: rgba(0,0,0,.8); font-size: 0; white-space: nowrap; overflow: auto;&#125;.mask::after&#123; content: ''; display: inline-block; height: 100%; vertical-align: middle;&#125;.dialog&#123; display: inline-block; text-align: left; font-size: 14px; color: #fff; white-space: normal;&#125; 11.float作用机制 1.作用机制: 使父元素高度塌陷从而实现文字环绕效果 2.float的定位参考是行框盒子,位于哪个行框盒子后就与哪个行框盒子对齐 3.clear属性只有块级元素才有效,如果clear:both元素前面是float元素,则设置margin-top负值无效 4.clear:both后面的元素仍然可能发生文字环绕效果 12.BFC–块级格式化上下文 1.表现: 元素内部的布局变化不会影响外部的元素.所以不会出现margin合并,可用来清除浮动的影响. 2.触发BFC的条件: 根元素 float的值不为none overflow的值为auto,scroll,hidden display的值为table-cell,inline-block position的值不为static或者relative 3.若元素具备BFC特性,则无需clear:both去清除浮动 4.display:table-cell的特性: 宽度设置的再大,也不会超过表格容器的宽度 5.overflow裁切界限:border box: 一个设置了overflow: hidden的元素同时设置了padding和border,则子元素超出容器宽高设置时,裁切的边界是border box内边缘而不是padding box内边缘 6.在PC端,默认滚动条均来自,PC端滚动高度可以用document.documentElement.scrollTop获取,在移动端用document.body.scrollTop获取 7.PC端滚动条宽度约为17px 8.让页面滚动条不出现晃动的方法: 123456789101112131415html&#123; /* ie8 */ overflow-y: scroll;&#125;:root&#123; overflow-y: auto; overflow-x: hidden;&#125;:root body&#123; position: absolute;&#125;body&#123; width: 100vw; overflow: hidden;&#125; 9.多行文本溢出显示省略号的css方法: 12345.ell-rows-2&#123; display: -webkit-box; -webkit-box-orient: vertical; -webkit-line-clamp: 2;&#125; 13.overflow与position:absolute 1.如果overflow不是定位元素,并且绝对定位元素和overflow容器之间没有定位元素,则overflow无法对absolute元素进行切割2.如果overflow属性值不是hidden而是auto或者scroll,则即使绝对定位元素宽高溢出也不会出现滚动条3.对于现代浏览器,如果overflow子元素transform溢出,则会裁剪’’4.overflow默认值为visible,内容不会被修剪，会呈现在元素框之外 14.absolute与clip 1.clip属性要想起作用，元素必须是absolute或者fixed,语法如下： 12/* 裁剪区域，不支持缩写和百分比值 */clip: rect(top right bottom left) 2.clip应用与渲染 1.最佳可访问性隐藏 12345/* 多用于SEO优化和对表单控件样式的优化以及屏幕阅读器的可访问性 */.clip&#123; position: absolute; clip: rect(0 0 0 0);&#125; 2.clip渲染 clip隐藏仅仅决定了哪部分是可见的，对于原来占据的空间并没有影响，非可见部分无法响应点击事件。在ie和火狐浏览器中，抹掉了不可见区域尺寸对布局的影响，chorme浏览器却保留了。 .re-box{ position: relative; width: 200px; height: 200px; background: #eee; overflow: auto; } .sb-sub{ position: absolute; width: 180px; height: 280px; clip: rect(0 0 0 0); } document.querySelector(".sb-sub").onclick = function(){ alert(1) } 12345678910111213.re-box&#123; position: relative; width: 200px; height: 200px; background: #eee; overflow: auto;&#125;.sb-sub&#123; position: absolute; width: 180px; height: 280px; clip: rect(0 0 0 0);&#125; absolute流体特性 1.absolute流体特性产生的前提： 对立方向上同时发生定位的时候 .re{ position: relative; margin-left: 10%; width: 300px; height: 300px; background: #000; } .ab{ position: absolute; left: 0; right: 0; top: 0; bottom: 0; margin-right: 20px; margin-left: auto; background: #06c; } 123456789/* 此时设置padding和margin，其占据的空间将不变，变化的是content box的尺寸 */.ab&#123; position: absolute; left: 0; right: 0; top: 0; bottom: 0; margin: 20px;&#125; 2.absolute的margin:auto居中 .re{ position: relative; margin-left: 10%; width: 300px; height: 300px; background: #000; } .ab1{ position: absolute; left: 0; right: 0; top: 0; bottom: 0; width: 200px; height: 200px; margin: auto; background: #06c; } 12345678/* 绝对定位元素的margin:auto的填充规则和普通流体一样如果一侧定值一侧auto,auto未剩余空间大小 */.ab1&#123; position: absolute; left: 0;right: 0;top: 0;bottom: 0; width: 200px; height: 200px; margin: auto;&#125; 3.在有些场合下，百分比transform会让ios微信闪退，尽量避免用其使元素居中，可以采用absolute和margin:auto解决 15.relative难点解析 1.relative的定位位移是相对于自身的，如果left/top/right/bottom的值为百分比单位，则计算尺寸是基于父元素 2.如果left/right 或top/bottom这些对立属性同时出现时，只有一个方向的属性会生效，优先级与文档流的顺序有关，默认的文档流是自上而下，从左到右的，所以top优先级高于bottom,left优先级高于right 3.relative的最小化原则 1.尽量不使用relative,可以采用无依赖绝对定位解决某些问题2.如果一定要使用relative,则relative务必最小化（最小包含区域） –为了避免层级覆盖等问题 4.层叠上下文 1.定位元素的默认z-index:auto;此时和普通元素一样，一旦z-index设置为任意数值，就创建了一个层叠上下文，顺序为：层叠上下文 &lt; 负z-index &lt; block &lt; float &lt; inline &lt; z-index:auto &lt; 正z-index2.css3新属性的层叠上下文：1.flex2.opacity不为13.transform不为none4.mix-blend-mode不为normal5.filter不为none6.isolation是isolate7.will-change为上面2-6的任意一个8.元素-webkit-overflow-scrolling设为touch 3.z-index负值在block下面，实际应用： 1.可访问性隐藏 2.ie8下的多背景隐藏]]></content>
      <categories>
        <category>css2高级</category>
      </categories>
      <tags>
        <tag>css2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[过渡与动画]]></title>
    <url>%2F2018%2F03%2F15%2Fanimation-transition%2F</url>
    <content type="text"><![CDATA[网页中过渡与动画是一种流行的表现手法，可以让界面显得更加生动和真实，接下来我们介绍的css3新特性，可以让你的web变得更加富有动感，让我们来看看精彩的案例吧！ 程序员必读 Css3编码技巧 1.弹性过渡–纯css实现表单提示层效果 知识点：贝塞尔曲线在线工具 .control{ width: 400px; margin: 20px auto; } .tip{ position: absolute; margin-left: -200px; margin-top: 36px; padding: 2px 6px; font-size: 12px; color: #fff; border-radius: 4px; border: 1px solid #ccc; background: #06c; transform-origin: 0 0; transition: transform .5s cubic-bezier(.25,.1,.3,1.5); } input{ width: 200px; height: 26px; } input:not(:focus) + .tip{ transform: scale(0); transition: transform ease .25s; } 用户名 请输入用户名 123456789101112131415161718192021.tip&#123; position: absolute; margin-left: -200px; margin-top: 36px; padding: 2px 6px; font-size: 12px; color: #fff; border-radius: 4px; border: 1px solid #ccc; background: #06c; transform-origin: 0 0; /* 关键 */ transition: transform .5s cubic-bezier(.25,.1,.3,1.5); /* 关键 */&#125;input&#123; width: 200px; height: 26px;&#125;input:not(:focus) + .tip&#123; transform: scale(0); /* 关键 */ transition: transform ease .25s; /* 关键 */&#125; 2.逐帧动画 知识点：steps() .keyframes-wrap{ width: 128px; height: 130px; margin: 20px auto; background: url(http://p3g4ahmhh.bkt.clouddn.com/animate.jpg) no-repeat top left; animation: loader 1s infinite steps(8); text-indent: 200%; white-space: nowrap; overflow: hidden; } @keyframes loader { to { background-position: -1024px; } } 正在加载... 12345678910.keyframes-wrap&#123; background: url(http://p3g4ahmhh.bkt.clouddn.com/animate.jpg) no-repeat top left; animation: loader 1s infinite steps(8); text-indent: 200%; white-space: nowrap; overflow: hidden;&#125;@keyframes loader &#123; to &#123; background-position: -1024px; &#125;&#125; 3.利用css控制动画的暂停和播放 知识点：animation-play-state .bg-wrap{ width: 300px; height: 130px; margin: 20px auto; background: url(http://p3g4ahmhh.bkt.clouddn.com/bg.jpg); background-size: auto 100%; animation: move 5s linear infinite alternate; animation-play-state: paused; } .bg-wrap:hover,.bg-wrap:focus{ animation-play-state: running; } @keyframes move { to { background-position: 100% 0; } } 123456789101112.bg-wrap&#123; background: url(http://p3g4ahmhh.bkt.clouddn.com/bg.jpg); background-size: auto 100%; animation: move 5s linear infinite alternate; animation-play-state: paused;&#125;.bg-wrap:hover,.bg-wrap:focus&#123; animation-play-state: running;&#125;@keyframes move &#123; to &#123; background-position: 100% 0; &#125;&#125; 4.沿环形路径平移的动画 知识点：transform: rotate(1turn); transform-origin变换的源点是基于自身的尺寸,默认值为自身的中心 .box{ display: flex; align-items: center; justify-content: center; width: 200px; height: 200px; border-radius: 100%; overflow: hidden; margin: 20px auto; background: orange; } .avator{ width: 60px; height: 60px; padding: 0; margin: 0 !important; border-radius: 100%; animation: spin 5s linear infinite; } @keyframes spin { from{ transform: rotate(0turn) translateY(-100px) translateY(50%) rotate(1turn) } to{ transform: rotate(1turn) translateY(-100px) translateY(50%) rotate(0turn) } } 1234567891011121314151617/* 首先要想方法让头像在父元素中居中 */.avator&#123; animation: spin 5s linear infinite;&#125;@keyframes spin &#123; from&#123; transform: rotate(0turn) translateY(-100px) translateY(50%) rotate(1turn) &#125; to&#123; transform: rotate(1turn) translateY(-100px) translateY(50%) rotate(0turn) &#125;&#125;]]></content>
      <categories>
        <category>Css3高级实用技巧大全</category>
      </categories>
      <tags>
        <tag>transition</tag>
        <tag>transform</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[根据兄弟元素数量来设置样式]]></title>
    <url>%2F2018%2F03%2F14%2Fselector%2F</url>
    <content type="text"><![CDATA[接下来我为大家介绍一种类似js效果的选择器，可以根据兄弟元素的数量来设置样式，那么我们开始吧。 程序员必读 Css3编码技巧 1. 当只有一项时的样式–only-child .list{ width: 80%; padding: 1em; margin-left: auto; margin-right: auto; margin-bottom: 20px; border-radius: 8px; color: #fff; background: #000; } .item{ display: inline-block; padding: .4em .6em; border-radius: 8px; line-height: 1em; } .item:only-child{ background: gray; } one 123.item:only-child&#123; /* 只有一个列表项时的样式 */ background: gray;&#125; 2. 根据兄弟元素的数量范围来选择元素 .item:nth-child(n+4){ background: orange; } .item-1:first-child:nth-last-child(n+4), .item-1:first-child:nth-last-child(n+4) ~ .item-1{ background: blue; } .item-2:first-child:nth-last-child(-n+4), .item-2:first-child:nth-last-child(-n+4) ~ .item-2{ background: green; } .item-3:first-child:nth-last-child(n+2):nth-last-child(-n+6), .item-3:first-child:nth-last-child(n+2):nth-last-child(-n+6) ~ .item-3{ background: #f6c; } 1. 选择列表中第四项及以后的所有项 one two three four five six 2. 列表至少有4项时选中所有项 one two three four five 3. 列表最多包含4项时选中所有项 one two three four 4. 列表项在2-6项时选中所有项 one two three four five six 1234567891011121314/* 1. 选择列表中第四项及以后的所有项 */.item:nth-child(n+4)/* 2. 列表至少有4项时选中所有项 */.item-1:first-child:nth-last-child(n+4),.item-1:first-child:nth-last-child(n+4) ~ .item-1/* 3. 列表最多包含4项时选中所有项 */.item-2:first-child:nth-last-child(-n+4),.item-2:first-child:nth-last-child(-n+4) ~ .item-2/* 4. 列表项在2-6项时选中所有项 */.item-3:first-child:nth-last-child(n+2):nth-last-child(-n+6),.item-3:first-child:nth-last-child(n+2):nth-last-child(-n+6) ~ .item-3]]></content>
      <categories>
        <category>Css3高级实用技巧大全</category>
      </categories>
      <tags>
        <tag>Css3</tag>
        <tag>nth-child(n)</tag>
        <tag>only-child</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[自定义单选框复选框]]></title>
    <url>%2F2018%2F03%2F14%2Fcheckbox%2F</url>
    <content type="text"><![CDATA[我们都知道原生的复选框控件样式极难自定义，这对于工程师实现设计稿的难度加大了一大截。css3的出现，增加了:checked选择器，因此我们可以利用:checked和label来实现各式各样的表单选择控件，接下来让我们来看看如何实现吧！ 程序员必读 Css3编码技巧 1.自定义复选框 .check-wrap{ text-align: center; } .checkbox{ position: absolute; clip: rect(0,0,0,0); } .checkbox[type="checkbox"]:focus + label::before{ box-shadow: 0 0 .6em #06c; } .checkbox[type="checkbox"] + label::before{ content: '\a0'; /* 不换行空格 */ display: inline-block; margin-right: .3em; width: 2em; height: 2em; border-radius: .3em; vertical-align: middle; line-height: 2em; /* 关键 */ font-size: 20px; text-align: center; color: #fff; background: gray; } .checkbox[type="checkbox"]:checked + label::before{ content: '\2713'; /* 对勾 */ background: black; } label{ margin-right: 40px; font-size: 20px; } 生男孩 生女孩 123456789101112131415161718192021222324.checkbox&#123; position: absolute; clip: rect(0,0,0,0);&#125;.checkbox[type="checkbox"] + label::before&#123; content: '\a0'; /* 不换行空格 */ display: inline-block; margin-right: .3em; width: 2em; height: 2em; border-radius: .3em; vertical-align: middle; line-height: 2em; /* 关键 */ font-size: 20px; text-align: center; color: #fff; background: gray;&#125;.checkbox[type="checkbox"]:checked + label::before&#123; content: '\2713'; /* 对勾 */ background: black;&#125; 2.自定义开关 .check-wrap{ margin-bottom: 20px; text-align: center; } .switch{ position: absolute; clip: rect(0,0,0,0); } .switch[type="checkbox"] + label{ width: 6em; height: 3em; padding: .3em; border-radius: .3em; border: 1px solid rgba(0,0,0,.2); vertical-align: middle; line-height: 2em; /* 关键 */ font-size: 20px; text-align: center; color: #fff; box-shadow: 0 1px white inset; background-color: #ccc; background-image: linear-gradient(#ddd,#bbb); } .switch[type="checkbox"]:checked + label{ box-shadow: 0.05em .1em .2em rgba(0,0,0,.6) inset; border-color: rgba(0,0,0,.3); background: #bbb; } label{ margin-right: 40px; font-size: 14px; } .switch-an{ position: absolute; clip: rect(0,0,0,0); } .switch-an[type="checkbox"] + label{ position: relative; display: inline-block; width: 5em; height: 2em; border-radius: 1em; color: #fff; background: #06c; text-align: left; } .switch-an[type="checkbox"] + label::before{ content: ''; width:2em; height: 2em; position: absolute; left: 0; border-radius: 100%; vertical-align: middle; background-color: #fff; transition: left .3s; } .switch-an[type="checkbox"] + label::after{ content: 'OFF'; margin-left: 2.6em; } .switch-an[type="checkbox"]:checked + label::before{ transition: left .3s; left: 3em; } .switch-an[type="checkbox"]:checked + label::after{ content: 'NO'; margin-left: .6em; } 生男孩 生女孩 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768/* 1 */.switch&#123; position: absolute; clip: rect(0,0,0,0);&#125;.switch[type="checkbox"] + label&#123; width: 6em; height: 3em; padding: .3em; border-radius: .3em; border: 1px solid rgba(0,0,0,.2); vertical-align: middle; line-height: 2em; /* 关键 */ font-size: 20px; text-align: center; color: #fff; box-shadow: 0 1px white inset; background-color: #ccc; background-image: linear-gradient(#ddd,#bbb);&#125;.switch[type="checkbox"]:checked + label&#123; box-shadow: 0.05em .1em .2em rgba(0,0,0,.6) inset; border-color: rgba(0,0,0,.3); background: #bbb;&#125;/* 2 */.switch-an&#123; position: absolute; clip: rect(0,0,0,0);&#125;.switch-an[type="checkbox"] + label&#123; position: relative; display: inline-block; width: 5em; height: 2em; border-radius: 1em; color: #fff; background: #06c; text-align: left;&#125;.switch-an[type="checkbox"] + label::before&#123; content: ''; width:2em; height: 2em; position: absolute; left: 0; border-radius: 100%; vertical-align: middle; background-color: #fff; transition: left .3s;&#125;.switch-an[type="checkbox"] + label::after&#123; content: 'OFF'; margin-left: 2.6em;&#125;.switch-an[type="checkbox"]:checked + label::before&#123; transition: left .3s; left: 3em;&#125;.switch-an[type="checkbox"]:checked + label::after&#123; content: 'NO'; margin-left: .6em;&#125;]]></content>
      <categories>
        <category>Css3高级实用技巧大全</category>
      </categories>
      <tags>
        <tag>Css3</tag>
        <tag>checkbox</tag>
        <tag>input</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[text-effect]]></title>
    <url>%2F2018%2F03%2F13%2Ftext-effect%2F</url>
    <content type="text"><![CDATA[文字特效在过去大部分都用图片代替，但是自从有了css3,前端的宝宝再也不用担心没有设计师来切图了。接下来就让我来给大家展示text-shadow的强大效果吧！ 程序员必读 Css3编码技巧 1.凸凹印刷效果 .effect-1{ width: 300px; margin-left: auto; margin-right: auto; line-height: 2em; background: hsl(210,13%,60%); color: hsl(210,13%,30%); text-shadow: 0 1px 1px hsla(0,0%,100%,.8); } the only way to get rid of a temptation is to yield to it. 1text-shadow: 0 1px 1px hsla(0,0%,100%,.8); 2.空心字效果 .effect-2{ width: 300px; margin-left: auto; margin-right: auto; font-size: 30px; text-align: center; line-height: 2em; background: deeppink; color: #fff; text-shadow: 1px 1px #000, -1px -1px #000, 1px -1px #000, -1px 1px #000; } the only way. 1234text-shadow: 1px 1px #000, -1px -1px #000, 1px -1px #000, -1px 1px #000; 3.文字外发光效果(鼠标经过文字会有惊喜哦！) .effect-3{ width: 300px; margin-left: auto; margin-right: auto; font-size: 30px; text-align: center; line-height: 2em; background: #203; color: #ffc; text-shadow: 0 0 .1em, 0 0 .3em; transition: 1s; } .effect-3:hover{ text-shadow: 0 0 .6em, 0 0 .8em; } hover me! 12text-shadow: 0 0 .1em, 0 0 .3em; 3.文字凸起效果 .effect-4{ width: 300px; margin-left: auto; margin-right: auto; font-size: 30px; text-align: center; line-height: 2em; background: #ccc; color: #fff; text-shadow: 0 1px hsl(0,0%,85%), 0 2px hsl(0,0%,80%), 0 3px hsl(0,0%,75%), 0 4px hsl(0,0%,70%), 0 5px hsl(0,0%,65%), 0 5px 10px #000; transition: 1s; } .effect-4:hover{ text-shadow: 0 1px hsl(0,0%,85%); } hover me! 123456text-shadow: 0 1px hsl(0,0%,85%), 0 2px hsl(0,0%,80%), 0 3px hsl(0,0%,75%), 0 4px hsl(0,0%,70%), 0 5px hsl(0,0%,65%), 0 5px 10px #000;]]></content>
      <categories>
        <category>Css3高级实用技巧大全</category>
      </categories>
      <tags>
        <tag>Css3</tag>
        <tag>text-shadow</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用码云]]></title>
    <url>%2F2018%2F03%2F12%2Fgit-china%2F</url>
    <content type="text"><![CDATA[使用GitHub时，国内的用户经常遇到的问题是访问速度太慢，有时候还会出现无法连接的情况。如果我们希望良好的体验速度，可以使用国内的Git托管服务——码云。 使用方法与步骤1.在码云上添加ssh公钥，新建一个项目2.本地库上使用命令git remote add把它和码云的远程库关联。1git remote add origin git@gitee.com:xujiang/learngit.git 之后，就可以正常地用git push和git pull推送了！ 3.如果在使用远程库时报错：1fatal: remote origin already exists. 这说明本地库已经关联了一个远程库，此时，可以先用git remote -v查看远程库信息 我们可以删除已有的GitHub远程库： 1git remote rm origin(假设远程库名叫origin) 再关联码云的远程库： 1git remote add origin git@gitee.com:xujiang/learngit.git 如果我想关联两个不同的版本库呢？ 1.首先远程库A 1git remote add A git@gitee.com:xujiang/learngit.git 2.再关联远程库B 1git remote add B git@github.com:xujiang/learngit.git 此时，如果要推送到A上，则可以： 1git push A master 要推送到B上，则可以： 1git push B master]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git全解读]]></title>
    <url>%2F2018%2F02%2F12%2FgitStudy%2F</url>
    <content type="text"><![CDATA[版本库又名仓库，英文名repository，你可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。 程序员必读 Css3编码技巧 创建并提交一个版本库 课外知识: mkdir 创建目录; pwd 显示绝对路径; cat 文件名 查看文件内容注：所有的版本控制系统，其实只能跟踪文本文件的改动，比如TXT文件，网页，所有的程序代码等等，Git也不例外。而图片、视频这些二进制文件，虽然也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是只知道图片从100KB改成了120KB，但到底改了啥，版本控制系统不知道，也没法知道。 Microsoft的Word格式是二进制格式，因此，版本控制系统是没法跟踪Word文件的改动的，如果要真要使用版本控制系统，就要以纯文本方式编写文件。千万不要使用Windows自带的记事本编辑任何文本文件,原因是Microsoft开发记事本的团队,在每个文件开头添加了0xefbbbf（十六进制）的字符，你会遇到很多不可思议的问题. 1.核心操作1234567891011# 1.初始化仓库,.git目录默认隐藏,可以通过命令ls -ah显示git init# 2.把文件添加到版本库，可以一次添加多个文件，git add . 代表把所有文件全部提交git add 文件名 文件名# 3.把文件提交到当前分支git commit -m '本次提交的说明'# 4.把项目提交到(远程)仓储git push 2.分支管理123456789101112131415161718192021# 1.查看远程分支git branch -a# 2.查看本地分支git branch# 3.创建并切换分支 （加-b表示创建并切换）git checkout -b 分支名# 4.切换回分支git checkout 分支名# 5.从主分支里创建新分支git checkout master -b 新分支名# 6.合并某分支到当前分支git merge 分支名# 7.删除分支git branch -d 分支名git branch -D 分支名 (强行删除分支) 3.解决冲突123456789101112131415# 情景一 提交或拉取时冲突git stashgit pullgit stash pop# 情景二 如果你想完全地覆盖本地的代码，只保留服务器端代码，则直接回退到上一个版本，再进行pullgit reset --hard HEAD^git pull origin master# 注：origin master表示git的主分支# 情景三 分支合并时冲突(当我们git merge 分支名 时)1.git status (查看发生冲突的文)2.然后手动合并冲突3.git add . (添加更改后的文件)4.git commit -m 'xj' (提交) 4.查看ssh密钥1234# 1.进入.ssh目录cd ~/.ssh# 2.查看id_rsa.pub文件cat id_rsa.pub 5.克隆远程项目1git clone 远程源地址 6.回退某个操作1234# 1.查看命令历史git reflog# 2.根据commitID撤销某个操作git reset --hard 某个commitId 7.和远程分支建立关联1git branch --set-upstream-to=origin/远程分支的名字 本地分支名 8.删除文件12345# 删除版本库中的文件git rm filename# 恢复工作区中误删的文件git checkout -- filename# 注：git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。 9.远程仓储1234567# 1.创建sshkey密钥ssh-keygen -t rsa -C "youremail@example.com"# 2.在远程仓库中添加ssh公钥# 3.关联远程库git remote add origin git@server-name:path/repo-name.git# 4.第一次推送master分支的所有内容,此后只需要使用git push origin master即可推送最新修改git push -u origin master 10.多人协作12345678910# 1.查看远程仓储的详细信息git remote -v# 2.推送本地分支到远程仓库, #1.如果发生冲突，用git pull试图合并，如果发生冲突则解决冲突，再进行推送 #2.如果git pull后提示no tracking information(没有追踪信息)，则进行第四项，建立关联，之后pull，有冲突再合并git push origin 本地分支名# 3.在本地创建和远程分支对应的分支git checkout -b 本地分支 origin/远程分支名# 4.建立本地分支和远程分支的关联git branch --set-upstream 本地分支名 origin/远程分支名 11.分支策略1231.master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；2.干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；3.每个人都有自己的分支，时不时地往dev分支上合并就可以了 补充 123456789101112131415161718192021# 查看仓库当前的状态git status// 查看提交日志git log# 回退版本,在git中用HEAD表示当前版本,HEAD^表示上一个版本,HEAD^^表示上上个版本git reset --hard HEAD^ 或git reset --hard 3628164 (数字代表log里commit后面的id,只需要填前几位就可以)# 窗口关闭后回退版本(git reflog用来记录你的每一次命令)git reflog# 工作区和暂存区工作区就是你建立的能看见的目录,.git即为git的版本库,Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。用git add把文件添加进去，实际上就是把文件修改添加到暂存区；用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支# 撤销修改1.直接丢弃工作区的修改，用命令git checkout -- file2.修改添加到了暂存区，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css3形状篇]]></title>
    <url>%2F2018%2F02%2F10%2Fshape%2F</url>
    <content type="text"><![CDATA[形状是网页中必不可少的一部分,它使得网页更加生动和精致,接下来就让我们开启css3形状之旅！ 程序员必读 Css3：box-shadow高级应用 .black-theme{ margin-left: auto; margin-right: auto; margin-bottom: 20px; text-align: center; border-radius: 8px; background-color: #000; color: #fff; } 1.制做平行四边形/棱形/梯形 知识点: transform: skew(deg),&nbsp;&nbsp;//skew代表斜切,值为角度 transform-origin: bottom/left/top(默认)/right 变换源点的位置 .sp-1{ position: relative; width: 140px; height: 80px; line-height: 80px; color: #fff; text-align: center; background-color: transparent; } .sp-1::before{ content: ''; position: absolute; z-index: -1; left: 0; right: 0; bottom: 0; top: 0; background-color: #06c; transform: skew(45deg); } .sp-1-1::before{ transform: scaleY(2) perspective(.5em) rotateX(5deg); transform-origin: bottom; } 平行四边形 梯形 核心代码 123456789101112131415/* 对伪类添加变形 */.sp-1::before&#123; content: ''; position: absolute; z-index: -1; left: 0; right: 0; bottom: 0; top: 0; background-color: #06c; transform: skew(45deg);&#125;/* 梯形 */transform: scaleY(2) perspective(.5em) rotateX(5deg);transform-origin: bottom; 2.制做切角效果 知识点: 利用背景渐变 .sp-2, .sp-3{ width: 140px; height: 80px; line-height: 80px; color: #fff; text-align: center; border-radius: 0; } .sp-2{ background: linear-gradient(-135deg,transparent 12px,#06c 0); } .sp-3{ background: radial-gradient(circle at top left,transparent 12px,#06c 0) no-repeat 0 0; } 切角 圆形切角 核心代码 1234/* 正切角 */background: linear-gradient(-135deg,transparent 12px,#06c 0);/* 圆形切角 */background: radial-gradient(circle at top left,transparent 12px,#06c 0) no-repeat 0 0;]]></content>
      <categories>
        <category>Css3高级实用技巧大全</category>
      </categories>
      <tags>
        <tag>Css3</tag>
        <tag>border-radius</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[border——radius篇]]></title>
    <url>%2F2018%2F02%2F10%2Fborder%2F</url>
    <content type="text"><![CDATA[border-radius的出现让我们实现圆角效果提供了极大的便利，我们还可以通过对Border-radius特性的进一步研究来实现各种图形效果，接下来就让我们看看它的威力吧！ 程序员必读 Css3：box-shadow高级应用 .black-theme{ margin-left: auto; margin-right: auto; margin-bottom: 20px; text-align: center; border-radius: 8px; background-color: #000; color: #fff; } 1.制作自适应的椭圆 知识点:border-radius: a / b;&nbsp;&nbsp;&nbsp;&nbsp;//a,b分别为圆角的水平、垂直半径,单位若为%,则表示相对于宽度和高度进行解析 .br-1{ width: 200px; height: 100px; border-radius: 50% /10%; background: linear-gradient(45deg,#06f,#f6c,#06c); } .br-2{ width: 100px; border-radius: 20% 50%; } .ani{ animation: skew 4s infinite; } .ani1{ animation: skew1 4s infinite 2s; } .ani2{ animation: skew2 4s infinite 3s; } @keyframes skew{ to{ border-radius: 50%; } } @keyframes skew1{ to{ border-radius: 20px 20px 100%; } } @keyframes skew2{ to{ transform: rotate(360deg); } } 核心代码 123border-radius: 50% /10%;border-radius: 20px 20px 100%;border-radius: 20% 50%; 3.纯css3实现饼图进度动画 知识点：border-radius: a b c d / e f g h; animation多动画属性; .br-31{ width: 100px; height: 100px; border-radius: 50%; background: linear-gradient(to right,#f6c 50%,#333 0); } .br-31::before{ content: ''; display: block; margin-left: 50%; height: 100%; border-radius: 0 100% 100% 0 / 50%; background-color: #f6c; transform-origin: left; animation: skin 4s linear infinite, bg 8s step-end infinite; } @keyframes skin{ to{ transform: rotate(.5turn); } } @keyframes bg{ 50%{ background: #333; } } .br-32::before{ animation-play-state: paused; animation-delay: inherit; } 核心代码 123456789101112131415161718192021222324252627.br-31&#123; width: 100px; height: 100px; border-radius: 50%; background: linear-gradient(to right,#f6c 50%,#333 0);&#125;.br-31::before&#123; content: ''; display: block; margin-left: 50%; height: 100%; border-radius: 0 100% 100% 0 / 50%; background-color: #f6c; transform-origin: left; animation: skin 4s linear infinite, bg 8s step-end infinite;&#125;@keyframes skin&#123; to&#123; transform: rotate(.5turn); &#125;&#125;@keyframes bg&#123; 50%&#123; background: #333; &#125;&#125;]]></content>
      <categories>
        <category>Css3高级实用技巧大全</category>
      </categories>
      <tags>
        <tag>Css3</tag>
        <tag>border-radius</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[box-shadow和filter篇]]></title>
    <url>%2F2018%2F02%2F03%2Fbox-shadow%2F</url>
    <content type="text"><![CDATA[利用css3的新特性可以帮助我们实现各种意想不到的特效,下面就来一起看看吧~ 程序员必读 Css3编码技巧 1.实现水波动画 知识点：box-shadow .wave { margin-left: auto; margin-right: auto; width: 100px; height: 100px; border-radius: 100px; border: 2px solid #fff; text-align: center; line-height: 100px; color: #fff; background: #06c url(http://p3g4ahmhh.bkt.clouddn.com/me.jpg) no-repeat center center; background-size: 100%; animation: wave 4s linear infinite; } @keyframes wave { 0% { box-shadow: 0 0 0 0 rgba(245, 226, 226, 1), 0 0 0 0 rgba(250, 189, 189, 1); } 50% { box-shadow: 0 0 0 20px rgba(245, 226, 226, .5), 0 0 0 0 rgba(250, 189, 189, 1); } 100% { box-shadow: 0 0 0 40px rgba(245, 226, 226, 0), 0 0 0 20px rgba(245, 226, 226, 0); } } 核心代码123456789101112// css@keyframes wave &#123; 0% &#123; box-shadow: 0 0 0 0 rgba(245, 226, 226, 1), 0 0 0 0 rgba(250, 189, 189, 1); &#125; 50% &#123; box-shadow: 0 0 0 20px rgba(245, 226, 226, .5), 0 0 0 0 rgba(250, 189, 189, 1); &#125; 100% &#123; box-shadow: 0 0 0 40px rgba(245, 226, 226, 0), 0 0 0 20px rgba(245, 226, 226, 0); &#125;&#125; 2.实现加载动画 知识点：box-shadow多阴影 .loading { margin-left: auto; margin-right: auto; width: 30px; height: 30px; border-radius: 30px; background-color: transparent; animation: load 3s linear infinite; } @keyframes load { 0% { box-shadow: -40px 0 0 rgba(250, 189, 189, 0), inset 0 0 0 15px rgba(250, 189, 189, 0), 40px 0 0 rgba(250, 189, 189, 0); } 30% { box-shadow: -40px 0 0 rgba(250, 189, 189, 1), inset 0 0 0 15px rgba(250, 189, 189, 0), 40px 0 0 rgba(250, 189, 189, 0); } 60% { box-shadow: -40px 0 0 rgba(250, 189, 189, 0), inset 0 0 0 15px rgba(250, 189, 189, 1), 40px 0 0 rgba(250, 189, 189, 0); } 100% { box-shadow: -40px 0 0 rgba(250, 189, 189, 0), inset 0 0 0 15px rgba(250, 189, 189, 0), 40px 0 0 rgba(250, 189, 189, 1); } } 核心代码1234567891011121314151617181920212223// css@keyframes load &#123; 0% &#123; box-shadow: -40px 0 0 rgba(250, 189, 189, 0), inset 0 0 0 15px rgba(250, 189, 189, 0), 40px 0 0 rgba(250, 189, 189, 0); &#125; 30% &#123; box-shadow: -40px 0 0 rgba(250, 189, 189, 1), inset 0 0 0 15px rgba(250, 189, 189, 0), 40px 0 0 rgba(250, 189, 189, 0); &#125; 60% &#123; box-shadow: -40px 0 0 rgba(250, 189, 189, 0), inset 0 0 0 15px rgba(250, 189, 189, 1), 40px 0 0 rgba(250, 189, 189, 0); &#125; 100% &#123; box-shadow: -40px 0 0 rgba(250, 189, 189, 0), inset 0 0 0 15px rgba(250, 189, 189, 0), 40px 0 0 rgba(250, 189, 189, 1); &#125;&#125; 3.投影 知识点：box-shadow 1.单侧投影 .single-shadow{ margin-left: auto; margin-right: auto; width: 200px; height: 80px; background: #06c; box-shadow: 0 8px 4px -4px #666; } 核心代码1box-shadow: 0 8px 4px -4px #666; 2.双侧投影 .double-shadow{ margin-left: auto; margin-right: auto; width: 200px; height: 80px; background: #06c; box-shadow: 8px 0 10px -8px #000, -8px 0 10px -8px #000; } 核心代码12box-shadow: 8px 0 10px -8px #000, -8px 0 10px -8px #000; 3.不规则投影 .odd-shadow{ margin-left: auto; margin-right: auto; width: 200px; height: 80px; border-radius: 8px; color: #fff; font-size: 24px; text-align: center; line-height: 80px; background: #06c; filter: drop-shadow(2px 2px 2px rgba(0,0,0,.8)) } .odd-shadow::before{ content: ''; position: absolute; display: block; margin-left: -20px; transform: translateY(20px); width:0; height: 0; border: 10px solid transparent; border-right-color: #06c; } 哎呦，猪先森 核心代码12/* 注：padding/margin设置百分比单位时，是基于父元素宽度的 */filter: drop-shadow(2px 2px 2px rgba(0,0,0,.8)) 4.滤镜filter1.染色效果 .img-filter{ margin-left: auto; margin-right: auto; width: 200px; display: block; border-radius: 100%; } .img-filter-1{ filter: sepia(1) } .img-filter-2{ filter: saturate(4) } .img-filter-3{ filter: hue-rotate(295deg) } .img-filter-4{ filter: sepia(1) saturate(4) hue-rotate(295deg) } 原图 染色后--sepia()会给图片增加一种降饱和度的橙黄色染色效果 染色后--saturate()会给图片的每个像素提高饱和度 染色后--hue-rotate()会给每个像素的色相进以指定度数进行偏移 染色后--多个滤镜组合 核心代码 12345678/* sepia() */filter: sepia(1)/* saturate() */filter: saturate(4)/* hue-rotate() */filter: hue-rotate(295deg)/* 混合 */filter: sepia(1) saturate(2) hue-rotate(100deg) 2.模糊效果 .img-blur{ margin-left: auto; margin-right: auto; width: 80px; height: 80px; border-radius: 8px; text-align: center; background-color: rgba(100,100,255,1); filter: blur(20px); color: #000; } Mr XuJiang, Love you. 核心代码 1filter: blur(20px);]]></content>
      <categories>
        <category>Css3高级实用技巧大全</category>
      </categories>
      <tags>
        <tag>box-shadow</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[border和background篇]]></title>
    <url>%2F2018%2F01%2F30%2Fanimation%2F</url>
    <content type="text"><![CDATA[自从有了Css3 transition和animation以来,前端开发在动画这一块有了更高的自由度和格局,对动画的开发也越来越容易.这篇文章就让我们汇总一下使用Css3实现的各种特效. 程序员必读 Css3编码技巧 .black-theme{ margin-left: auto; margin-right: auto; margin-bottom: 20px; text-align: center; border-radius: 8px; background-color: #000; color: #fff; } 1.实现内部虚线边框 知识点：outline .dash-border{ width: 200px; height: 100px; line-height: 100px; outline: 1px dashed #fff; outline-offset: -10px; } hello world 核心代码12345// css.dash-border&#123; outline: 1px dashed #fff; outline-offset: -10px;&#125; 2.边框内圆角的实现 知识点：box-shadow .radius-border{ margin-top: 20px; width: 180px; height: 80px; box-shadow: 0 0 0 10px gray; } 核心代码 1box-shadow: 0 0 0 10px gray; 3.实现条纹背景与进度条 知识点：linear-gradient,repeating-linear-gradient .bg-stripe{ margin-top: 20px; width: 180px; height: 20px; background: linear-gradient(to right,#fb3 50%,#58a 0); background-size: 40px 100%; box-shadow: inset 0 0 3px #555; } .bg-stripe-2{ background: linear-gradient(45deg,#fb3 25%,#58a 0,#58a 50%,#fb3 0,#fb3 75%,#58a 0); background-size: 40px 40px; } .bg-stripe-3{ background: repeating-linear-gradient(60deg,#fb3,#fb3 15px,#58a 0,#58a 30px); } 核心代码 12345678910// 上background: linear-gradient(to right,#fb3 50%,#58a 0);background-size: 40px 100%;// 中background: linear-gradient(45deg,#fb3 25%,#58a 0,#58a 50%,#fb3 0,#fb3 75%,#58a 0);background-size: 40px 40px;// 下 (可以实现任意角度的渐变，45°时显示效果最好)background: repeating-linear-gradient(60deg,#fb3,#fb3 15px,#58a 0,#58a 30px); 4.复杂的背景图案 知识点：linear-gradient,repeating-linear-gradient,radial-gradient .bg-grid{ margin-top: 20px; width: 200px; height: 200px; background-image: linear-gradient(rgba(255,255,255,1) 2px,transparent 0), linear-gradient(to right,rgba(255,255,255,1) 2px,transparent 0), linear-gradient(rgba(255,255,255,.2) 1px,transparent 0), linear-gradient(to right,rgba(255,255,255,.2) 1px,transparent 0); background-position: -50px -50px; background-size: 100px 100px,100px 100px, 100% 10px, 10px 100%; } .animate-grid{ animation: move-grid 6s linear infinite; } @keyframes move-grid{ 0%{ background-position: -50px -50px; } 30%{ background-position: -100px -100px; } 60%{ background-position: -100px -150px; } 100%{ background-position: -50px -50px; } } 核心代码 1234567// 1background-image: linear-gradient(rgba(255,255,255,1) 2px,transparent 0), linear-gradient(to right,rgba(255,255,255,1) 2px,transparent 0), linear-gradient(rgba(255,255,255,.2) 1px,transparent 0), linear-gradient(to right,rgba(255,255,255,.2) 1px,transparent 0); background-position: -50px -50px; background-size: 100px 100px,100px 100px, 100% 10px, 10px 100%; .bg-dot{ margin-top: 20px; width: 200px; height: 50px; background-image: radial-gradient(circle,#0cf 15px,transparent), radial-gradient(circle,red 15px,transparent), radial-gradient(circle,yellow 15px,transparent), radial-gradient(circle,green 15px,transparent); background-repeat: no-repeat; background-position: 0 0, 50px 0, 100px 0, 150px 0, 200px 0; background-size: 50px 50px; } .animate-dot{ animation: move-dot 8s linear infinite; } .animate-dot2{ animation: move-dot2 6s linear infinite; } @keyframes move-dot{ 0%{ background-position: 0 0, 50px 0, 100px 0, 150px 0; } 30%{ background-position: 50px 0, 0 0, 100px 0, 150px 0; } 60%{ background-position: 50px 0, 100px 0, 0 0, 150px 0; } 100%{ background-position: 50px 0, 100px 0, 150px 0, 0 0; } } @keyframes move-dot2{ 0%{ background-image: radial-gradient(circle,#0cf 15px,transparent), radial-gradient(circle,gray 15px,transparent), radial-gradient(circle,gray 15px,transparent), radial-gradient(circle,gray 15px,transparent); } 30%{ background-image: radial-gradient(circle,gray 15px,transparent), radial-gradient(circle,red 15px,transparent), radial-gradient(circle,gray 15px,transparent), radial-gradient(circle,gray 15px,transparent); } 60%{ background-image: radial-gradient(circle,gray 15px,transparent), radial-gradient(circle,gray 15px,transparent), radial-gradient(circle,yellow 15px,transparent), radial-gradient(circle,gray 15px,transparent); } 100%{ background-image: radial-gradient(circle,gray 15px,transparent), radial-gradient(circle,gray 15px,transparent), radial-gradient(circle,gray 15px,transparent), radial-gradient(circle,green 15px,transparent); } } 核心代码 12345678// 利用css3多背景和position实现红绿灯和背景色块移动background-image: radial-gradient(circle,#0cf 15px,transparent), radial-gradient(circle,red 15px,transparent), radial-gradient(circle,yellow 15px,transparent), radial-gradient(circle,green 15px,transparent); background-repeat: no-repeat; background-position: 0 0, 50px 0, 100px 0, 150px 0, 200px 0; background-size: 50px 50px; .bg-qi{ margin-top: 20px; width: 200px; height: 200px; background-color: #eee; background-image: linear-gradient(45deg,rgba(0,0,0,.25) 25%,transparent 0,transparent 75%,rgba(0,0,0,.25) 0), linear-gradient(45deg,rgba(0,0,0,.25) 25%,transparent 0,transparent 75%,rgba(0,0,0,.25) 0); background-position: 0 0, 20px 20px; background-size: 40px 40px; box-shadow: 2px 2px 4px rgba(0,0,0,.4); } 核心代码 12345// 利用背景渐变实现棋盘图案background-image: linear-gradient(45deg,rgba(0,0,0,.25) 25%,transparent 0,transparent 75%,rgba(0,0,0,.25) 0), linear-gradient(45deg,rgba(0,0,0,.25) 25%,transparent 0,transparent 75%,rgba(0,0,0,.25) 0);background-position: 0 0, 20px 20px;background-size: 40px 40px; 伪随机背景 .bg-line-rand{ margin-top: 20px; width: 480px; height: 60px; background-color: #eee; background-image: linear-gradient(90deg,#fb3 11px, transparent 0), linear-gradient(90deg,#ab4 23px, transparent 0), linear-gradient(90deg,#655 41px, transparent 0); background-size: 41px 100%, 61px 100%, 83px 100%; box-shadow: 2px 2px 4px rgba(0,0,0,.4); } .bg-dot-rand{ margin-top: 20px; width: 200px; height: 200px; background-color: #eee; background-image: radial-gradient(circle,#fb3 5px, transparent 0), radial-gradient(circle,#ab4 13px, transparent 0), radial-gradient(circle,#655 31px, transparent 0); background-repeat: no-repeat; background-size: 101px 203px, 147px 60px, 373px 201px; box-shadow: 2px 2px 4px rgba(0,0,0,.4); } .animate1{ animation: move 4s linear infinite; } .animate2{ animation: move2 4s linear infinite; } @keyframes move{ 0%{ background-position: 0 0, 0 0, 0 0; } 50%{ background-position: -10px 0, 20px 0, 30px 0; } 100%{ background-position: 0 0, 30px 0, 10px 0; } } @keyframes move2{ 0%{ background-position: 0 0, 0 0, 0 0; } 50%{ background-position: -10px 30px, 20px 0, -40px 80px; } 100%{ background-position: 0 20px, 60px -20px, 10px 30px; } } 核心代码 12345678910111213// 利用背景渐变实现棋盘图案/*线性*/background-image: linear-gradient(90deg,#fb3 11px, transparent 0), linear-gradient(90deg,#ab4 23px, transparent 0), linear-gradient(90deg,#655 41px, transparent 0); background-size: 41px 100%, 61px 100%, 83px 100%;/*径向*/background-image: radial-gradient(circle,#fb3 5px, transparent 0), radial-gradient(circle,#ab4 13px, transparent 0), radial-gradient(circle,#655 31px, transparent 0);background-repeat: no-repeat;background-size: 101px 203px, 147px 60px, 373px 201px; 5.折角效果 知识点：linear-gradient 1.折角效果 .fold{ margin-left: auto; margin-right: auto; margin-bottom: 20px; width: 200px; height: 80px; color: #fff; line-height: 80px; text-align: center; background: linear-gradient(to left bottom,transparent 50%,rgba(0,0,0,.5) 0) no-repeat 100% 0 / 2em 2em, linear-gradient(-135deg,transparent 1.4em,#06c 0); } .linear{ background: linear-gradient(to left bottom,transparent 50%,rgba(0,0,0,.5)) no-repeat 100% 0 / 2em 2em, linear-gradient(-135deg,transparent 1.4em,#06c); } 折角效果哦 折角效果哦 核心代码 12background: linear-gradient(to left bottom,transparent 50%,rgba(0,0,0,.5) 0) no-repeat 100% 0 / 2em 2em, linear-gradient(-135deg,transparent 1.4em,#06c 0); 2.内阴影圆折角效果 .fold-1{ margin-left: auto; margin-right: auto; margin-bottom: 20px; position: relative; width: 200px; height: 80px; border-radius: .5em; color: #fff; line-height: 80px; text-align: center; background: linear-gradient(-150deg,transparent 1.5em, #58a 0); } .fold-1::before{ content: ""; position: absolute; top: 0; right: 0; background: linear-gradient(to left bottom,transparent 50%,rgba(0,0,0,.2) 0,rgba(0,0,0,.4)) 100% 0 no-repeat; width: 1.73em; height: 3em; transform: translateY(-1.3em) rotate(-30deg); transform-origin: bottom right; border-bottom-left-radius: inherit; box-shadow: -.2em .2em .3em -.1em rgba(0,0,0,.15); } 折角效果哦 核心代码 1234567891011121314151617181920212223242526.fold-1&#123; margin-left: auto; margin-right: auto; margin-bottom: 20px; position: relative; width: 200px; height: 80px; border-radius: .5em; color: #fff; line-height: 80px; text-align: center; background: linear-gradient(-150deg,transparent 1.5em, #58a 0);&#125;.fold-1::before&#123; content: ""; position: absolute; top: 0; right: 0; background: linear-gradient(to left bottom,transparent 50%,rgba(0,0,0,.2) 0,rgba(0,0,0,.4)) 100% 0 no-repeat; width: 1.73em; height: 3em; transform: translateY(-1.3em) rotate(-30deg); transform-origin: bottom right; border-bottom-left-radius: inherit; box-shadow: -.2em .2em .3em -.1em rgba(0,0,0,.15);&#125; 6.自适应文本的条纹背景 知识点：linear-gradient,line-height,background-origin .stripe-bg{ padding: .5em; line-height: 1.5em; background: beige; background-size: auto 3em; background-origin: content-box; background-image: linear-gradient(rgba(0,0,0,.2) 50%, transparent 0); } .stripe-bg > p{ margin: 0; } hello you hello you hello you hello you hello you 7.自定义的下划线实现 知识点linear-gridient .my-line{ line-height: 1.4em; background: linear-gradient(gray,gray) no-repeat; background-size: 100% 1px; background-position: 0 1.15em; text-shadow: .05em 0 #fff, -.05em 0 #fff; } i have your big apple.you have a too? hi hi hi. 小伙伴们注意到了吗？默认的下划线会将文字穿过，而上面的不会呦！ 12345678# 核心代码.my-line&#123; line-height: 1.4em; background: linear-gradient(gray,gray) no-repeat; background-size: 100% 1px; background-position: 0 1.15em; text-shadow: .05em 0 #fff, -.05em 0 #fff;&#125;]]></content>
      <categories>
        <category>Css3高级实用技巧大全</category>
      </categories>
      <tags>
        <tag>Css3</tag>
        <tag>outline</tag>
        <tag>radial-gradient</tag>
        <tag>linear-gradient</tag>
        <tag>box-shadow</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我的博客测试]]></title>
    <url>%2F2018%2F01%2F29%2Fhello-world%2F</url>
    <content type="text"><![CDATA[欢迎访问猪先森的博客,这篇文章是教你如何快速创建一个基于HEXO的博客,涉及到node和npm的相关使用,如果你是一枚程序猿,如果你还没有一个上手的博客,哈哈,你懂的,赶快来围观吧！ 快速开始创建一个博客文章页面1$ hexo new "My New Post" 更多参考: Writing 运行服务器1$ hexo server 更多参考: Server 生成静态文件1$ hexo generate 更多参考: Generating 发布到远程站点1$ hexo deploy 更多参考: Deployment hexo高级技巧 实现博客页面自定义交互 1&lt;escape&gt;在此标签内的元素可以不被hexo解析&lt;/escape&gt;]]></content>
      <categories>
        <category>测试</category>
      </categories>
  </entry>
</search>
