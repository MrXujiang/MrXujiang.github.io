<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[自定义单选框复选框]]></title>
    <url>%2F2018%2F03%2F14%2Fcheckbox%2F</url>
    <content type="text"><![CDATA[我们都知道原生的复选框控件样式极难自定义，这对于工程师实现设计稿的难度加大了一大截。css3的出现，增加了:checked选择器，因此我们可以利用:checked和label来实现各式各样的表单选择控件，接下来让我们来看看如何实现吧！ 程序员必读 Css3编码技巧 1.自定义复选框 .check-wrap{ text-align: center; } .checkbox{ position: absolute; clip: rect(0,0,0,0); } .checkbox[type="checkbox"]:focus + label::before{ box-shadow: 0 0 .6em #06c; } .checkbox[type="checkbox"] + label::before{ content: '\a0'; /* 不换行空格 */ display: inline-block; margin-right: .3em; width: 2em; height: 2em; border-radius: .3em; vertical-align: middle; line-height: 2em; /* 关键 */ font-size: 20px; text-align: center; color: #fff; background: gray; } .checkbox[type="checkbox"]:checked + label::before{ content: '\2713'; /* 对勾 */ background: black; } label{ margin-right: 40px; font-size: 20px; } 生男孩 生女孩 123456789101112131415161718192021222324.checkbox&#123; position: absolute; clip: rect(0,0,0,0);&#125;.checkbox[type="checkbox"] + label::before&#123; content: '\a0'; /* 不换行空格 */ display: inline-block; margin-right: .3em; width: 2em; height: 2em; border-radius: .3em; vertical-align: middle; line-height: 2em; /* 关键 */ font-size: 20px; text-align: center; color: #fff; background: gray;&#125;.checkbox[type="checkbox"]:checked + label::before&#123; content: '\2713'; /* 对勾 */ background: black;&#125; 2.自定义开关 .check-wrap{ margin-bottom: 20px; text-align: center; } .switch{ position: absolute; clip: rect(0,0,0,0); } .switch[type="checkbox"] + label{ width: 6em; height: 3em; padding: .3em; border-radius: .3em; border: 1px solid rgba(0,0,0,.2); vertical-align: middle; line-height: 2em; /* 关键 */ font-size: 20px; text-align: center; color: #fff; box-shadow: 0 1px white inset; background-color: #ccc; background-image: linear-gradient(#ddd,#bbb); } .switch[type="checkbox"]:checked + label{ box-shadow: 0.05em .1em .2em rgba(0,0,0,.6) inset; border-color: rgba(0,0,0,.3); background: #bbb; } label{ margin-right: 40px; font-size: 14px; } .switch-an{ position: absolute; clip: rect(0,0,0,0); } .switch-an[type="checkbox"] + label{ position: relative; display: inline-block; width: 5em; height: 2em; border-radius: 1em; color: #fff; background: #06c; text-align: left; } .switch-an[type="checkbox"] + label::before{ content: ''; width:2em; height: 2em; position: absolute; left: 0; border-radius: 100%; vertical-align: middle; background-color: #fff; transition: left .3s; } .switch-an[type="checkbox"] + label::after{ content: 'OFF'; margin-left: 2.6em; } .switch-an[type="checkbox"]:checked + label::before{ transition: left .3s; left: 3em; } .switch-an[type="checkbox"]:checked + label::after{ content: 'NO'; margin-left: .6em; } 生男孩 生女孩 1234567891011121314151617181920212223242526272829/* 1 */.switch&#123; position: absolute; clip: rect(0,0,0,0);&#125;.switch[type="checkbox"] + label&#123; width: 6em; height: 3em; padding: .3em; border-radius: .3em; border: 1px solid rgba(0,0,0,.2); vertical-align: middle; line-height: 2em; /* 关键 */ font-size: 20px; text-align: center; color: #fff; box-shadow: 0 1px white inset; background-color: #ccc; background-image: linear-gradient(#ddd,#bbb);&#125;.switch[type="checkbox"]:checked + label&#123; box-shadow: 0.05em .1em .2em rgba(0,0,0,.6) inset; border-color: rgba(0,0,0,.3); background: #bbb;&#125;/* 2 */]]></content>
      <categories>
        <category>Css3高级实用技巧大全</category>
      </categories>
      <tags>
        <tag>Css3</tag>
        <tag>checkbox</tag>
        <tag>input</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[text-effect]]></title>
    <url>%2F2018%2F03%2F13%2Ftext-effect%2F</url>
    <content type="text"><![CDATA[文字特效在过去大部分都用图片代替，但是自从有了css3,前端的宝宝再也不用担心没有设计师来切图了。接下来就让我来给大家展示text-shadow的强大效果吧！ 程序员必读 Css3编码技巧 1.凸凹印刷效果 .effect-1{ width: 300px; margin-left: auto; margin-right: auto; line-height: 2em; background: hsl(210,13%,60%); color: hsl(210,13%,30%); text-shadow: 0 1px 1px hsla(0,0%,100%,.8); } the only way to get rid of a temptation is to yield to it. 1text-shadow: 0 1px 1px hsla(0,0%,100%,.8); 2.空心字效果 .effect-2{ width: 300px; margin-left: auto; margin-right: auto; font-size: 30px; text-align: center; line-height: 2em; background: deeppink; color: #fff; text-shadow: 1px 1px #000, -1px -1px #000, 1px -1px #000, -1px 1px #000; } the only way. 1234text-shadow: 1px 1px #000, -1px -1px #000, 1px -1px #000, -1px 1px #000; 3.文字外发光效果(鼠标经过文字会有惊喜哦！) .effect-3{ width: 300px; margin-left: auto; margin-right: auto; font-size: 30px; text-align: center; line-height: 2em; background: #203; color: #ffc; text-shadow: 0 0 .1em, 0 0 .3em; transition: 1s; } .effect-3:hover{ text-shadow: 0 0 .6em, 0 0 .8em; } hover me! 12text-shadow: 0 0 .1em, 0 0 .3em; 3.文字凸起效果 .effect-4{ width: 300px; margin-left: auto; margin-right: auto; font-size: 30px; text-align: center; line-height: 2em; background: #ccc; color: #fff; text-shadow: 0 1px hsl(0,0%,85%), 0 2px hsl(0,0%,80%), 0 3px hsl(0,0%,75%), 0 4px hsl(0,0%,70%), 0 5px hsl(0,0%,65%), 0 5px 10px #000; transition: 1s; } .effect-4:hover{ text-shadow: 0 1px hsl(0,0%,85%); } hover me! 123456text-shadow: 0 1px hsl(0,0%,85%), 0 2px hsl(0,0%,80%), 0 3px hsl(0,0%,75%), 0 4px hsl(0,0%,70%), 0 5px hsl(0,0%,65%), 0 5px 10px #000;]]></content>
      <categories>
        <category>Css3高级实用技巧大全</category>
      </categories>
      <tags>
        <tag>Css3</tag>
        <tag>text-shadow</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用码云]]></title>
    <url>%2F2018%2F03%2F12%2Fgit-china%2F</url>
    <content type="text"><![CDATA[使用GitHub时，国内的用户经常遇到的问题是访问速度太慢，有时候还会出现无法连接的情况。如果我们希望良好的体验速度，可以使用国内的Git托管服务——码云。 使用方法与步骤1.在码云上添加ssh公钥，新建一个项目2.本地库上使用命令git remote add把它和码云的远程库关联。1git remote add origin git@gitee.com:xujiang/learngit.git 之后，就可以正常地用git push和git pull推送了！ 3.如果在使用远程库时报错：1fatal: remote origin already exists. 这说明本地库已经关联了一个远程库，此时，可以先用git remote -v查看远程库信息 我们可以删除已有的GitHub远程库： 1git remote rm origin(假设远程库名叫origin) 再关联码云的远程库： 1git remote add origin git@gitee.com:xujiang/learngit.git 如果我想关联两个不同的版本库呢？ 1.首先远程库A 1git remote add A git@gitee.com:xujiang/learngit.git 2.再关联远程库B 1git remote add B git@github.com:xujiang/learngit.git 此时，如果要推送到A上，则可以： 1git push A master 要推送到B上，则可以： 1git push B master]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git全解读]]></title>
    <url>%2F2018%2F02%2F12%2FgitStudy%2F</url>
    <content type="text"><![CDATA[版本库又名仓库，英文名repository，你可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。 程序员必读 Css3编码技巧 创建并提交一个版本库 课外知识: mkdir 创建目录; pwd 显示绝对路径; cat 文件名 查看文件内容注：所有的版本控制系统，其实只能跟踪文本文件的改动，比如TXT文件，网页，所有的程序代码等等，Git也不例外。而图片、视频这些二进制文件，虽然也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是只知道图片从100KB改成了120KB，但到底改了啥，版本控制系统不知道，也没法知道。 Microsoft的Word格式是二进制格式，因此，版本控制系统是没法跟踪Word文件的改动的，如果要真要使用版本控制系统，就要以纯文本方式编写文件。千万不要使用Windows自带的记事本编辑任何文本文件,原因是Microsoft开发记事本的团队,在每个文件开头添加了0xefbbbf（十六进制）的字符，你会遇到很多不可思议的问题. 1.核心操作1234567891011# 1.初始化仓库,.git目录默认隐藏,可以通过命令ls -ah显示git init# 2.把文件添加到版本库，可以一次添加多个文件，git add . 代表把所有文件全部提交git add 文件名 文件名# 3.把文件提交到当前分支git commit -m '本次提交的说明'# 4.把项目提交到(远程)仓储git push 2.分支管理123456789101112131415161718192021# 1.查看远程分支git branch -a# 2.查看本地分支git branch# 3.创建并切换分支 （加-b表示创建并切换）git checkout -b 分支名# 4.切换回分支git checkout 分支名# 5.从主分支里创建新分支git checkout master -b 新分支名# 6.合并某分支到当前分支git merge 分支名# 7.删除分支git branch -d 分支名git branch -D 分支名 (强行删除分支) 3.解决冲突123456789101112131415# 情景一 提交或拉取时冲突git stashgit pullgit stash pop# 情景二 如果你想完全地覆盖本地的代码，只保留服务器端代码，则直接回退到上一个版本，再进行pullgit reset --hard HEAD^git pull origin master# 注：origin master表示git的主分支# 情景三 分支合并时冲突(当我们git merge 分支名 时)1.git status (查看发生冲突的文)2.然后手动合并冲突3.git add . (添加更改后的文件)4.git commit -m 'xj' (提交) 4.查看ssh密钥1234# 1.进入.ssh目录cd ~/.ssh# 2.查看id_rsa.pub文件cat id_rsa.pub 5.克隆远程项目1git clone 远程源地址 6.回退某个操作1234# 1.查看命令历史git reflog# 2.根据commitID撤销某个操作git reset --hard 某个commitId 7.和远程分支建立关联1git branch --set-upstream-to=origin/远程分支的名字 本地分支名 8.删除文件12345# 删除版本库中的文件git rm filename# 恢复工作区中误删的文件git checkout -- filename# 注：git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。 9.远程仓储1234567# 1.创建sshkey密钥ssh-keygen -t rsa -C "youremail@example.com"# 2.在远程仓库中添加ssh公钥# 3.关联远程库git remote add origin git@server-name:path/repo-name.git# 4.第一次推送master分支的所有内容,此后只需要使用git push origin master即可推送最新修改git push -u origin master 10.多人协作12345678910# 1.查看远程仓储的详细信息git remote -v# 2.推送本地分支到远程仓库, #1.如果发生冲突，用git pull试图合并，如果发生冲突则解决冲突，再进行推送 #2.如果git pull后提示no tracking information(没有追踪信息)，则进行第四项，建立关联，之后pull，有冲突再合并git push origin 本地分支名# 3.在本地创建和远程分支对应的分支git checkout -b 本地分支 origin/远程分支名# 4.建立本地分支和远程分支的关联git branch --set-upstream 本地分支名 origin/远程分支名 11.分支策略1231.master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；2.干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；3.每个人都有自己的分支，时不时地往dev分支上合并就可以了 补充 123456789101112131415161718192021# 查看仓库当前的状态git status// 查看提交日志git log# 回退版本,在git中用HEAD表示当前版本,HEAD^表示上一个版本,HEAD^^表示上上个版本git reset --hard HEAD^ 或git reset --hard 3628164 (数字代表log里commit后面的id,只需要填前几位就可以)# 窗口关闭后回退版本(git reflog用来记录你的每一次命令)git reflog# 工作区和暂存区工作区就是你建立的能看见的目录,.git即为git的版本库,Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。用git add把文件添加进去，实际上就是把文件修改添加到暂存区；用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支# 撤销修改1.直接丢弃工作区的修改，用命令git checkout -- file2.修改添加到了暂存区，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css3形状篇]]></title>
    <url>%2F2018%2F02%2F10%2Fshape%2F</url>
    <content type="text"><![CDATA[形状是网页中必不可少的一部分,它使得网页更加生动和精致,接下来就让我们开启css3形状之旅！ 程序员必读 Css3：box-shadow高级应用 .black-theme{ margin-left: auto; margin-right: auto; margin-bottom: 20px; text-align: center; border-radius: 8px; background-color: #000; color: #fff; } 1.制做平行四边形/棱形/梯形 知识点: transform: skew(deg),&nbsp;&nbsp;//skew代表斜切,值为角度 transform-origin: bottom/left/top(默认)/right 变换源点的位置 .sp-1{ position: relative; width: 140px; height: 80px; line-height: 80px; color: #fff; text-align: center; background-color: transparent; } .sp-1::before{ content: ''; position: absolute; z-index: -1; left: 0; right: 0; bottom: 0; top: 0; background-color: #06c; transform: skew(45deg); } .sp-1-1::before{ transform: scaleY(2) perspective(.5em) rotateX(5deg); transform-origin: bottom; } 平行四边形 梯形 核心代码 123456789101112131415/* 对伪类添加变形 */.sp-1::before&#123; content: ''; position: absolute; z-index: -1; left: 0; right: 0; bottom: 0; top: 0; background-color: #06c; transform: skew(45deg);&#125;/* 梯形 */transform: scaleY(2) perspective(.5em) rotateX(5deg);transform-origin: bottom; 2.制做切角效果 知识点: 利用背景渐变 .sp-2, .sp-3{ width: 140px; height: 80px; line-height: 80px; color: #fff; text-align: center; border-radius: 0; } .sp-2{ background: linear-gradient(-135deg,transparent 12px,#06c 0); } .sp-3{ background: radial-gradient(circle at top left,transparent 12px,#06c 0) no-repeat 0 0; } 切角 圆形切角 核心代码 1234/* 正切角 */background: linear-gradient(-135deg,transparent 12px,#06c 0);/* 圆形切角 */background: radial-gradient(circle at top left,transparent 12px,#06c 0) no-repeat 0 0;]]></content>
      <categories>
        <category>Css3高级实用技巧大全</category>
      </categories>
      <tags>
        <tag>Css3</tag>
        <tag>border-radius</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[border——radius篇]]></title>
    <url>%2F2018%2F02%2F10%2Fborder%2F</url>
    <content type="text"><![CDATA[border-radius的出现让我们实现圆角效果提供了极大的便利，我们还可以通过对Border-radius特性的进一步研究来实现各种图形效果，接下来就让我们看看它的威力吧！ 程序员必读 Css3：box-shadow高级应用 .black-theme{ margin-left: auto; margin-right: auto; margin-bottom: 20px; text-align: center; border-radius: 8px; background-color: #000; color: #fff; } 1.制作自适应的椭圆 知识点:border-radius: a / b;&nbsp;&nbsp;&nbsp;&nbsp;//a,b分别为圆角的水平、垂直半径,单位若为%,则表示相对于宽度和高度进行解析 .br-1{ width: 200px; height: 100px; border-radius: 50% /10%; background: linear-gradient(45deg,#06f,#f6c,#06c); } .br-2{ width: 100px; border-radius: 20% 50%; } .ani{ animation: skew 4s infinite; } .ani1{ animation: skew1 4s infinite 2s; } .ani2{ animation: skew2 4s infinite 3s; } @keyframes skew{ to{ border-radius: 50%; } } @keyframes skew1{ to{ border-radius: 20px 20px 100%; } } @keyframes skew2{ to{ transform: rotate(360deg); } } 核心代码 123border-radius: 50% /10%;border-radius: 20px 20px 100%;border-radius: 20% 50%; 3.纯css3实现饼图进度动画 知识点：border-radius: a b c d / e f g h; animation多动画属性; .br-31{ width: 100px; height: 100px; border-radius: 50%; background: linear-gradient(to right,#f6c 50%,#333 0); } .br-31::before{ content: ''; display: block; margin-left: 50%; height: 100%; border-radius: 0 100% 100% 0 / 50%; background-color: #f6c; transform-origin: left; animation: skin 4s linear infinite, bg 8s step-end infinite; } @keyframes skin{ to{ transform: rotate(.5turn); } } @keyframes bg{ 50%{ background: #333; } } .br-32::before{ animation-play-state: paused; animation-delay: inherit; } 核心代码 123456789101112131415161718192021222324252627.br-31&#123; width: 100px; height: 100px; border-radius: 50%; background: linear-gradient(to right,#f6c 50%,#333 0);&#125;.br-31::before&#123; content: ''; display: block; margin-left: 50%; height: 100%; border-radius: 0 100% 100% 0 / 50%; background-color: #f6c; transform-origin: left; animation: skin 4s linear infinite, bg 8s step-end infinite;&#125;@keyframes skin&#123; to&#123; transform: rotate(.5turn); &#125;&#125;@keyframes bg&#123; 50%&#123; background: #333; &#125;&#125;]]></content>
      <categories>
        <category>Css3高级实用技巧大全</category>
      </categories>
      <tags>
        <tag>Css3</tag>
        <tag>border-radius</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[box-shadow和filter篇]]></title>
    <url>%2F2018%2F02%2F03%2Fbox-shadow%2F</url>
    <content type="text"><![CDATA[利用css3的新特性可以帮助我们实现各种意想不到的特效,下面就来一起看看吧~ 程序员必读 Css3编码技巧 1.实现水波动画 知识点：box-shadow .wave { margin-left: auto; margin-right: auto; width: 100px; height: 100px; border-radius: 100px; border: 2px solid #fff; text-align: center; line-height: 100px; color: #fff; background: #06c url(http://p3g4ahmhh.bkt.clouddn.com/me.jpg) no-repeat center center; background-size: 100%; animation: wave 4s linear infinite; } @keyframes wave { 0% { box-shadow: 0 0 0 0 rgba(245, 226, 226, 1), 0 0 0 0 rgba(250, 189, 189, 1); } 50% { box-shadow: 0 0 0 20px rgba(245, 226, 226, .5), 0 0 0 0 rgba(250, 189, 189, 1); } 100% { box-shadow: 0 0 0 40px rgba(245, 226, 226, 0), 0 0 0 20px rgba(245, 226, 226, 0); } } 核心代码123456789101112// css@keyframes wave &#123; 0% &#123; box-shadow: 0 0 0 0 rgba(245, 226, 226, 1), 0 0 0 0 rgba(250, 189, 189, 1); &#125; 50% &#123; box-shadow: 0 0 0 20px rgba(245, 226, 226, .5), 0 0 0 0 rgba(250, 189, 189, 1); &#125; 100% &#123; box-shadow: 0 0 0 40px rgba(245, 226, 226, 0), 0 0 0 20px rgba(245, 226, 226, 0); &#125;&#125; 2.实现加载动画 知识点：box-shadow多阴影 .loading { margin-left: auto; margin-right: auto; width: 30px; height: 30px; border-radius: 30px; background-color: transparent; animation: load 3s linear infinite; } @keyframes load { 0% { box-shadow: -40px 0 0 rgba(250, 189, 189, 0), inset 0 0 0 15px rgba(250, 189, 189, 0), 40px 0 0 rgba(250, 189, 189, 0); } 30% { box-shadow: -40px 0 0 rgba(250, 189, 189, 1), inset 0 0 0 15px rgba(250, 189, 189, 0), 40px 0 0 rgba(250, 189, 189, 0); } 60% { box-shadow: -40px 0 0 rgba(250, 189, 189, 0), inset 0 0 0 15px rgba(250, 189, 189, 1), 40px 0 0 rgba(250, 189, 189, 0); } 100% { box-shadow: -40px 0 0 rgba(250, 189, 189, 0), inset 0 0 0 15px rgba(250, 189, 189, 0), 40px 0 0 rgba(250, 189, 189, 1); } } 核心代码1234567891011121314151617181920212223// css@keyframes load &#123; 0% &#123; box-shadow: -40px 0 0 rgba(250, 189, 189, 0), inset 0 0 0 15px rgba(250, 189, 189, 0), 40px 0 0 rgba(250, 189, 189, 0); &#125; 30% &#123; box-shadow: -40px 0 0 rgba(250, 189, 189, 1), inset 0 0 0 15px rgba(250, 189, 189, 0), 40px 0 0 rgba(250, 189, 189, 0); &#125; 60% &#123; box-shadow: -40px 0 0 rgba(250, 189, 189, 0), inset 0 0 0 15px rgba(250, 189, 189, 1), 40px 0 0 rgba(250, 189, 189, 0); &#125; 100% &#123; box-shadow: -40px 0 0 rgba(250, 189, 189, 0), inset 0 0 0 15px rgba(250, 189, 189, 0), 40px 0 0 rgba(250, 189, 189, 1); &#125;&#125; 3.投影 知识点：box-shadow 1.单侧投影 .single-shadow{ margin-left: auto; margin-right: auto; width: 200px; height: 80px; background: #06c; box-shadow: 0 8px 4px -4px #666; } 核心代码1box-shadow: 0 8px 4px -4px #666; 2.双侧投影 .double-shadow{ margin-left: auto; margin-right: auto; width: 200px; height: 80px; background: #06c; box-shadow: 8px 0 10px -8px #000, -8px 0 10px -8px #000; } 核心代码12box-shadow: 8px 0 10px -8px #000, -8px 0 10px -8px #000; 3.不规则投影 .odd-shadow{ margin-left: auto; margin-right: auto; width: 200px; height: 80px; border-radius: 8px; color: #fff; font-size: 24px; text-align: center; line-height: 80px; background: #06c; filter: drop-shadow(2px 2px 2px rgba(0,0,0,.8)) } .odd-shadow::before{ content: ''; position: absolute; display: block; margin-left: -20px; transform: translateY(20px); width:0; height: 0; border: 10px solid transparent; border-right-color: #06c; } 哎呦，猪先森 核心代码12/* 注：padding/margin设置百分比单位时，是基于父元素宽度的 */filter: drop-shadow(2px 2px 2px rgba(0,0,0,.8)) 4.滤镜filter1.染色效果 .img-filter{ margin-left: auto; margin-right: auto; width: 200px; display: block; border-radius: 100%; } .img-filter-1{ filter: sepia(1) } .img-filter-2{ filter: saturate(4) } .img-filter-3{ filter: hue-rotate(295deg) } .img-filter-4{ filter: sepia(1) saturate(4) hue-rotate(295deg) } 原图 染色后--sepia()会给图片增加一种降饱和度的橙黄色染色效果 染色后--saturate()会给图片的每个像素提高饱和度 染色后--hue-rotate()会给每个像素的色相进以指定度数进行偏移 染色后--多个滤镜组合 核心代码 12345678/* sepia() */filter: sepia(1)/* saturate() */filter: saturate(4)/* hue-rotate() */filter: hue-rotate(295deg)/* 混合 */filter: sepia(1) saturate(2) hue-rotate(100deg) 2.模糊效果 .img-blur{ margin-left: auto; margin-right: auto; width: 80px; height: 80px; border-radius: 8px; text-align: center; background-color: rgba(100,100,255,1); filter: blur(20px); color: #000; } Mr XuJiang, Love you. 核心代码 1filter: blur(20px);]]></content>
      <categories>
        <category>Css3高级实用技巧大全</category>
      </categories>
      <tags>
        <tag>box-shadow</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[border和background篇]]></title>
    <url>%2F2018%2F01%2F30%2Fanimation%2F</url>
    <content type="text"><![CDATA[自从有了Css3 transition和animation以来,前端开发在动画这一块有了更高的自由度和格局,对动画的开发也越来越容易.这篇文章就让我们汇总一下使用Css3实现的各种特效. 程序员必读 Css3编码技巧 .black-theme{ margin-left: auto; margin-right: auto; margin-bottom: 20px; text-align: center; border-radius: 8px; background-color: #000; color: #fff; } 1.实现内部虚线边框 知识点：outline .dash-border{ width: 200px; height: 100px; line-height: 100px; outline: 1px dashed #fff; outline-offset: -10px; } hello world 核心代码12345// css.dash-border&#123; outline: 1px dashed #fff; outline-offset: -10px;&#125; 2.边框内圆角的实现 知识点：box-shadow .radius-border{ margin-top: 20px; width: 180px; height: 80px; box-shadow: 0 0 0 10px gray; } 核心代码 1box-shadow: 0 0 0 10px gray; 3.实现条纹背景与进度条 知识点：linear-gradient,repeating-linear-gradient .bg-stripe{ margin-top: 20px; width: 180px; height: 20px; background: linear-gradient(to right,#fb3 50%,#58a 0); background-size: 40px 100%; box-shadow: inset 0 0 3px #555; } .bg-stripe-2{ background: linear-gradient(45deg,#fb3 25%,#58a 0,#58a 50%,#fb3 0,#fb3 75%,#58a 0); background-size: 40px 40px; } .bg-stripe-3{ background: repeating-linear-gradient(60deg,#fb3,#fb3 15px,#58a 0,#58a 30px); } 核心代码 12345678910// 上background: linear-gradient(to right,#fb3 50%,#58a 0);background-size: 40px 100%;// 中background: linear-gradient(45deg,#fb3 25%,#58a 0,#58a 50%,#fb3 0,#fb3 75%,#58a 0);background-size: 40px 40px;// 下 (可以实现任意角度的渐变，45°时显示效果最好)background: repeating-linear-gradient(60deg,#fb3,#fb3 15px,#58a 0,#58a 30px); 4.复杂的背景图案 知识点：linear-gradient,repeating-linear-gradient,radial-gradient .bg-grid{ margin-top: 20px; width: 200px; height: 200px; background-image: linear-gradient(rgba(255,255,255,1) 2px,transparent 0), linear-gradient(to right,rgba(255,255,255,1) 2px,transparent 0), linear-gradient(rgba(255,255,255,.2) 1px,transparent 0), linear-gradient(to right,rgba(255,255,255,.2) 1px,transparent 0); background-position: -50px -50px; background-size: 100px 100px,100px 100px, 100% 10px, 10px 100%; } .animate-grid{ animation: move-grid 6s linear infinite; } @keyframes move-grid{ 0%{ background-position: -50px -50px; } 30%{ background-position: -100px -100px; } 60%{ background-position: -100px -150px; } 100%{ background-position: -50px -50px; } } 核心代码 1234567// 1background-image: linear-gradient(rgba(255,255,255,1) 2px,transparent 0), linear-gradient(to right,rgba(255,255,255,1) 2px,transparent 0), linear-gradient(rgba(255,255,255,.2) 1px,transparent 0), linear-gradient(to right,rgba(255,255,255,.2) 1px,transparent 0); background-position: -50px -50px; background-size: 100px 100px,100px 100px, 100% 10px, 10px 100%; .bg-dot{ margin-top: 20px; width: 200px; height: 50px; background-image: radial-gradient(circle,#0cf 15px,transparent), radial-gradient(circle,red 15px,transparent), radial-gradient(circle,yellow 15px,transparent), radial-gradient(circle,green 15px,transparent); background-repeat: no-repeat; background-position: 0 0, 50px 0, 100px 0, 150px 0, 200px 0; background-size: 50px 50px; } .animate-dot{ animation: move-dot 8s linear infinite; } .animate-dot2{ animation: move-dot2 6s linear infinite; } @keyframes move-dot{ 0%{ background-position: 0 0, 50px 0, 100px 0, 150px 0; } 30%{ background-position: 50px 0, 0 0, 100px 0, 150px 0; } 60%{ background-position: 50px 0, 100px 0, 0 0, 150px 0; } 100%{ background-position: 50px 0, 100px 0, 150px 0, 0 0; } } @keyframes move-dot2{ 0%{ background-image: radial-gradient(circle,#0cf 15px,transparent), radial-gradient(circle,gray 15px,transparent), radial-gradient(circle,gray 15px,transparent), radial-gradient(circle,gray 15px,transparent); } 30%{ background-image: radial-gradient(circle,gray 15px,transparent), radial-gradient(circle,red 15px,transparent), radial-gradient(circle,gray 15px,transparent), radial-gradient(circle,gray 15px,transparent); } 60%{ background-image: radial-gradient(circle,gray 15px,transparent), radial-gradient(circle,gray 15px,transparent), radial-gradient(circle,yellow 15px,transparent), radial-gradient(circle,gray 15px,transparent); } 100%{ background-image: radial-gradient(circle,gray 15px,transparent), radial-gradient(circle,gray 15px,transparent), radial-gradient(circle,gray 15px,transparent), radial-gradient(circle,green 15px,transparent); } } 核心代码 12345678// 利用css3多背景和position实现红绿灯和背景色块移动background-image: radial-gradient(circle,#0cf 15px,transparent), radial-gradient(circle,red 15px,transparent), radial-gradient(circle,yellow 15px,transparent), radial-gradient(circle,green 15px,transparent); background-repeat: no-repeat; background-position: 0 0, 50px 0, 100px 0, 150px 0, 200px 0; background-size: 50px 50px; .bg-qi{ margin-top: 20px; width: 200px; height: 200px; background-color: #eee; background-image: linear-gradient(45deg,rgba(0,0,0,.25) 25%,transparent 0,transparent 75%,rgba(0,0,0,.25) 0), linear-gradient(45deg,rgba(0,0,0,.25) 25%,transparent 0,transparent 75%,rgba(0,0,0,.25) 0); background-position: 0 0, 20px 20px; background-size: 40px 40px; box-shadow: 2px 2px 4px rgba(0,0,0,.4); } 核心代码 12345// 利用背景渐变实现棋盘图案background-image: linear-gradient(45deg,rgba(0,0,0,.25) 25%,transparent 0,transparent 75%,rgba(0,0,0,.25) 0), linear-gradient(45deg,rgba(0,0,0,.25) 25%,transparent 0,transparent 75%,rgba(0,0,0,.25) 0);background-position: 0 0, 20px 20px;background-size: 40px 40px; 伪随机背景 .bg-line-rand{ margin-top: 20px; width: 480px; height: 60px; background-color: #eee; background-image: linear-gradient(90deg,#fb3 11px, transparent 0), linear-gradient(90deg,#ab4 23px, transparent 0), linear-gradient(90deg,#655 41px, transparent 0); background-size: 41px 100%, 61px 100%, 83px 100%; box-shadow: 2px 2px 4px rgba(0,0,0,.4); } .bg-dot-rand{ margin-top: 20px; width: 200px; height: 200px; background-color: #eee; background-image: radial-gradient(circle,#fb3 5px, transparent 0), radial-gradient(circle,#ab4 13px, transparent 0), radial-gradient(circle,#655 31px, transparent 0); background-repeat: no-repeat; background-size: 101px 203px, 147px 60px, 373px 201px; box-shadow: 2px 2px 4px rgba(0,0,0,.4); } .animate1{ animation: move 4s linear infinite; } .animate2{ animation: move2 4s linear infinite; } @keyframes move{ 0%{ background-position: 0 0, 0 0, 0 0; } 50%{ background-position: -10px 0, 20px 0, 30px 0; } 100%{ background-position: 0 0, 30px 0, 10px 0; } } @keyframes move2{ 0%{ background-position: 0 0, 0 0, 0 0; } 50%{ background-position: -10px 30px, 20px 0, -40px 80px; } 100%{ background-position: 0 20px, 60px -20px, 10px 30px; } } 核心代码 12345678910111213// 利用背景渐变实现棋盘图案/*线性*/background-image: linear-gradient(90deg,#fb3 11px, transparent 0), linear-gradient(90deg,#ab4 23px, transparent 0), linear-gradient(90deg,#655 41px, transparent 0); background-size: 41px 100%, 61px 100%, 83px 100%;/*径向*/background-image: radial-gradient(circle,#fb3 5px, transparent 0), radial-gradient(circle,#ab4 13px, transparent 0), radial-gradient(circle,#655 31px, transparent 0);background-repeat: no-repeat;background-size: 101px 203px, 147px 60px, 373px 201px; 5.折角效果 知识点：linear-gradient 1.折角效果 .fold{ margin-left: auto; margin-right: auto; margin-bottom: 20px; width: 200px; height: 80px; color: #fff; line-height: 80px; text-align: center; background: linear-gradient(to left bottom,transparent 50%,rgba(0,0,0,.5) 0) no-repeat 100% 0 / 2em 2em, linear-gradient(-135deg,transparent 1.4em,#06c 0); } .linear{ background: linear-gradient(to left bottom,transparent 50%,rgba(0,0,0,.5)) no-repeat 100% 0 / 2em 2em, linear-gradient(-135deg,transparent 1.4em,#06c); } 折角效果哦 折角效果哦 核心代码 12background: linear-gradient(to left bottom,transparent 50%,rgba(0,0,0,.5) 0) no-repeat 100% 0 / 2em 2em, linear-gradient(-135deg,transparent 1.4em,#06c 0); 2.内阴影圆折角效果 .fold-1{ margin-left: auto; margin-right: auto; margin-bottom: 20px; position: relative; width: 200px; height: 80px; border-radius: .5em; color: #fff; line-height: 80px; text-align: center; background: linear-gradient(-150deg,transparent 1.5em, #58a 0); } .fold-1::before{ content: ""; position: absolute; top: 0; right: 0; background: linear-gradient(to left bottom,transparent 50%,rgba(0,0,0,.2) 0,rgba(0,0,0,.4)) 100% 0 no-repeat; width: 1.73em; height: 3em; transform: translateY(-1.3em) rotate(-30deg); transform-origin: bottom right; border-bottom-left-radius: inherit; box-shadow: -.2em .2em .3em -.1em rgba(0,0,0,.15); } 折角效果哦 核心代码 1234567891011121314151617181920212223242526.fold-1&#123; margin-left: auto; margin-right: auto; margin-bottom: 20px; position: relative; width: 200px; height: 80px; border-radius: .5em; color: #fff; line-height: 80px; text-align: center; background: linear-gradient(-150deg,transparent 1.5em, #58a 0);&#125;.fold-1::before&#123; content: ""; position: absolute; top: 0; right: 0; background: linear-gradient(to left bottom,transparent 50%,rgba(0,0,0,.2) 0,rgba(0,0,0,.4)) 100% 0 no-repeat; width: 1.73em; height: 3em; transform: translateY(-1.3em) rotate(-30deg); transform-origin: bottom right; border-bottom-left-radius: inherit; box-shadow: -.2em .2em .3em -.1em rgba(0,0,0,.15);&#125; 6.自适应文本的条纹背景 知识点：linear-gradient,line-height,background-origin .stripe-bg{ padding: .5em; line-height: 1.5em; background: beige; background-size: auto 3em; background-origin: content-box; background-image: linear-gradient(rgba(0,0,0,.2) 50%, transparent 0); } .stripe-bg > p{ margin: 0; } hello you hello you hello you hello you hello you 7.自定义的下划线实现 知识点linear-gridient .my-line{ line-height: 1.4em; background: linear-gradient(gray,gray) no-repeat; background-size: 100% 1px; background-position: 0 1.15em; text-shadow: .05em 0 #fff, -.05em 0 #fff; } i have your big apple.you have a too? hi hi hi. 小伙伴们注意到了吗？默认的下划线会将文字穿过，而上面的不会呦！ 12345678# 核心代码.my-line&#123; line-height: 1.4em; background: linear-gradient(gray,gray) no-repeat; background-size: 100% 1px; background-position: 0 1.15em; text-shadow: .05em 0 #fff, -.05em 0 #fff;&#125;]]></content>
      <categories>
        <category>Css3高级实用技巧大全</category>
      </categories>
      <tags>
        <tag>Css3</tag>
        <tag>outline</tag>
        <tag>radial-gradient</tag>
        <tag>linear-gradient</tag>
        <tag>box-shadow</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我的博客测试]]></title>
    <url>%2F2018%2F01%2F29%2Fhello-world%2F</url>
    <content type="text"><![CDATA[欢迎访问猪先森的博客,这篇文章是教你如何快速创建一个基于HEXO的博客,涉及到node和npm的相关使用,如果你是一枚程序猿,如果你还没有一个上手的博客,哈哈,你懂的,赶快来围观吧！ 快速开始创建一个博客文章页面1$ hexo new "My New Post" 更多参考: Writing 运行服务器1$ hexo server 更多参考: Server 生成静态文件1$ hexo generate 更多参考: Generating 发布到远程站点1$ hexo deploy 更多参考: Deployment hexo高级技巧 实现博客页面自定义交互 1&lt;escape&gt;在此标签内的元素可以不被hexo解析&lt;/escape&gt;]]></content>
      <categories>
        <category>测试</category>
      </categories>
  </entry>
</search>
